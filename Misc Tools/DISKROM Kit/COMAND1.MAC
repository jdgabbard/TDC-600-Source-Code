 	.Z80     
	TITLE	COMMAND 1.11
	.COMMENT%
---------------------------------------
Este programa es un desensamble del 
COMMAND.COM version 1.11
El MSXDOS lo carga en la direccion 100H
y el se reubica a partir del contenido
de las direcciones 6 y 7.
---------------------------------------
	%
	SUBTTL	Definiciones.
	PAGE

	.COMMENT%

MSX-DOS
-------
Estas variables son compartidas por 
este programa y MSXDOS.
El punto de referencia es ( 6 y 7 )

	%

START	EQU	DOS+13H
COUNT	EQU	DOS+15H
CK_SUM	EQU	DOS+17H
BAT_FL	EQU	DOS+19H
ECH_FL	EQU	DOS+1AH
LOC_NF	EQU	DOS+1BH
DOS_X	EQU	DOS+1CH
DOS_FCB	EQU	DOS+30H
L01A3D	EQU	DOS+3EH
L01A50	EQU	DOS+51H
L01A52	EQU	DOS+53H
DOS_X2	EQU	DOS+55H
ECHO_FL	EQU	0FAFDH
;
;    GENERALES
;    ---------
; Variables
;
TPA	EQU	0100H
DEF_DMA	EQU	0080H
FCB_1	EQU	005CH
FCB_2	EQU	006CH

CR	EQU	0DH
LF	EQU	0AH
;
; Rutinas
;
BDOS	EQU	0005H

EN_PAGE	EQU	0F368H
RS_PAGE	EQU	0F36BH
;
; Macros
;
NEXT	MACRO
	DS	100H-LOW($)
	ENDM

FS	MACRO	KK,UU
	REPT	KK
	DB	UU
	ENDM
	ENDM

	SUBTTL	Macros para reubicacion.
	PAGE

	.COMMENT%

Estas cuatro MACROS generan nuevas ins-
trucciones que ademas de generar codigo
van sumando a una lista las posiciones
de memoria en que existen referencias a 
direcciones o valores absolutos para
que le sea sumado el offset correspon-
diente durante la reubicacion.

Estas instrucciones son:

  RLD   = LD
  RDW   = DW
  RJP   = JP
  RCALL = CALL

y deben reemplazar las originales en las
instrucciones que tengan operandos relati-
vos al modulo a reubicar.

	%

RCALL	MACRO	BB,FF
	IFNB	<FF>
	CALL	BB,FF
	ELSE
	CALL	BB
	ENDIF
	MK
	ENDM

RJP	MACRO	CC,GG
	IFNB	<GG>
	JP	CC,GG
	ELSE
	JP	CC
	ENDIF
	MK
	ENDM

RDW	MACRO	DD
	DW	DD
	MK
	ENDM

RLD	MACRO	EE,HH
	LD	EE,HH
	MK
	ENDM

MK	MACRO
	MK1	%(MK_COU)
	ENDM

MK1	MACRO	AA
MKP&AA	EQU	$-501H
MK_COU	ASET	MK_COU+1
	ENDM


DDWW	MACRO	DD
	DW	MKP&DD
	ENDM

; C O N T A D O R E S

	IF1
MK_COU	ASET	1
	ENDIF
;
	SUBTTL	Tabla para reubicacion.
	PAGE

	ASEG
	ORG	100H

L00100:	JP	INIT
	
RU_TBL:
	IF2

TT_COU	ASET	MK_COU
MKP_2	ASET	1

	REPT	TT_COU-1
	DDWW	%(MKP_2)
MKP_2	ASET	MKP_2+1
	ENDM
	
	DW	0
MK_COU	ASET	1

	ENDIF

	DS	550H-$

	SUBTTL	Reubicacion.
	PAGE

INIT:
	LD	A,(0007H)
	LD	BC,DOS-INPUT
	SUB	B
	LD	D,A
	LD	E,00H
	RLD	HL,INPUT
	LDIR
	LD	B,A
	DEC	B
	SUB	HIGH INPUT
	MK
	LD	C,A
	LD	HL,RU_TBL
L00517:	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	A,D
	OR	E
	JR	Z,L00529
	EX	DE,HL
	LD	A,H
	ADD	A,B
	LD	H,A
	LD	A,(HL)
	ADD	A,C
	LD	(HL),A
	EX	DE,HL
	JR	L00517
;
L00529:	INC	B
	LD	H,B
	LD	L,00H
	JP	(HL)

	NEXT

	SUBTTL	Entrada.
	PAGE

INPUT:	RLD	SP,DOS
L00603:	RLD	HL,RESID
	RLD	(START),HL
	LD	BC,BUFFER-RESID
	SRL	B
	RR	C
	RLD	(COUNT),BC
	LD	DE,0000H
L00617:	LD	A,(HL)
	INC	HL
	ADD	A,E
	LD	E,A
	LD	A,(HL)
	INC	HL
	ADC	A,D
	LD	D,A
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,L00617
	RLD	(CK_SUM),DE
	RLD	A,(LOC_NF)
	OR	A
	RJP	NZ,RESID
	RLD	(ECHO_FL),A
	INC	A
	RLD	(LOC_NF),A
	RLD	DE,L00684
	LD	C,09H
	CALL	BDOS
	RLD	HL,L00677
	RLD	DE,DOS_FCB
	LD	BC,000DH
	LDIR
	RLD	DE,DOS_FCB
	LD	C,0FH
L0064B:	CALL	BDOS
	OR	A
	JR	NZ,L00666
	LD	HL,0000H
	RLD	(L01A50),HL
	RLD	(L01A52),HL
	INC	HL
	RLD	(L01A3D),HL
	LD	A,01H
	RLD	(BAT_FL),A
	RJP	RESID
;
L00666:	LD	A,0DH
	LD	(DEF_DMA+1),A
	LD	A,(0F338H)
	AND	A
	JR	NZ,L00674
	RCALL	DATE_CMD
L00674:	RJP	RESID
;
L00677:	DB	0,'AUTOEXECBAT',0
L00684:	DB	'MSX-DOS ver. 1.10 (C) 1983  Microsoft Corp.'
	DB	CR,LF,'Revision 1.20 (C) 1989 de Sielcon',CR,LF,'$'

	NEXT

	SUBTTL	CCP Residente.
	PAGE

;
; MODULO RESIDENTE
;
RESID:	RLD	SP,DOS
	LD	E,0FFH
L00705:	LD	C,0EH
	CALL	BDOS
	RLD	(L01831),A
	RCALL	DSP_CR
	RLD	DE,MSG28
L00711	EQU	$-02
;
	RCALL	L0148A
PROMT:	RLD	HL,PROMT
	PUSH	HL
	LD	C,19H
	CALL	BDOS
	RLD	(DFL_DRV),A

	RJP	PROMP
	DS	2,0
PROM1:	LD	A,'>'
	RCALL	DSP_BYT
PROMP2:	RLD	HL,(BUFFER+1)
	RLD	(L017E0),HL
	RLD	A,(BAT_FL)
	OR	A
	JR	NZ,L00757
	RLD	DE,BUFFER
	LD	A,DEF_DMA
	LD	(DE),A
	LD	C,0AH
	CALL	BDOS
	RLD	A,(BUFFER+1)
	CP	80H
	JR	C,L00754
	LD	A,7FH
	RLD	(BUFFER+1),A
	LD	A,0DH
	RLD	(BUFEND-1),A
L00754:	RJP	L007F2
;
L00757:	RLD	DE,DOS_FCB
	LD	C,0FH
	CALL	BDOS
	OR	A
	RLD	DE,MSG01
	RJP	NZ,L013E7
	LD	HL,0001H
	RLD	(L01A3D),HL
L0076C:	RLD	DE,L0182F
	LD	C,1AH
	CALL	BDOS
	RLD	DE,BUFFER+2
L00777:	RCALL	L007BF
	CP	25H
	JR	NZ,L007AC
	RCALL	L007BF
	CP	25H
	JR	Z,L007AC
	CP	0DH
	JR	Z,L007AC
	SUB	30H
	JR	C,L00777
	CP	0AH
	JR	NC,L00777
	ADD	A,A
	RLD	HL,DOS_X
	ADD	A,L
	LD	L,A
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	OR	H
	JR	Z,L00777
L0079E:	LD	A,(HL)
	INC	HL
	RCALL	CHCK_2
	JR	Z,L00777
	JR	C,L00777
	RCALL	L007E0
	JR	L0079E
;
L007AC:	RCALL	L007E0
	CP	0DH
	JR	NZ,L00777
	LD	A,E
	SUB	51H
	RLD	(BUFFER+1),A
	RCALL	L007BF
L007BC:	RJP	L007F2
;
L007BF:	PUSH	HL
	PUSH	DE
	PUSH	BC
	RLD	DE,DOS_FCB
	LD	HL,0001H
	LD	C,27H
	CALL	BDOS
	POP	BC
	POP	DE
	POP	HL
L007D0:	OR	A
	JR	NZ,L007D9
	RLD	A,(L0182F)
	CP	1AH
	RET	NZ
L007D9:	XOR	A
	RLD	(BAT_FL),A
	LD	A,0DH
	RET

L007E0:	PUSH	HL
	RLD	HL,BUFEND-2
	OR	A
	SBC	HL,DE
	POP	HL
	JR	NC,L007ED
	CP	0DH
	RET	NZ
L007ED:	LD	(DE),A
	INC	DE
	PUSH	DE
	LD	E,A
	LD	A,(ECHO_FL)
	CP	0
	LD	A,E
	POP	DE
	RET	Z
	RJP	DSP_BYT


L007F2:	RLD	A,(BAT_FL)
	OR	A
	JR	Z,SIGO
	LD	A,(ECHO_FL)
	OR	A
	JR	NZ,SIGO
	LD	A,13
	RCALL	DSP_BYT
	JR	SIGO1
SIGO:	RCALL	DSP_LF
SIGO1:	RLD	A,(BUFFER+1)
	OR	A
	JR	NZ,L0080A
	RLD	HL,(L017E0)
	RLD	(BUFFER+1),HL
REM_CMD:
	RET
;
ERR_REENT:
	LD	C,09H
	CALL	BDOS
	RJP	DSP_CR
;
L0080A:	RLD	HL,BUFFER+2
	RLD	DE,LINE
	XOR	A
	RCALL	SCANNER
	PUSH	HL
	LD	DE,DEF_DMA+1
	LD	B,0FFH
L0081A:	LD	A,(HL)
	LD	(DE),A
	INC	B
	INC	HL
	INC	DE
	CP	0DH
	JR	NZ,L0081A
	LD	A,B
	LD	(DEF_DMA),A
	POP	HL
	RCALL	SCAN_SW
	RLD	(SW_MSK1),A
	LD	DE,FCB_1
	LD	A,01H
	RCALL	SCANNER
	RCALL	SCAN_SW
	RLD	(SW_MSK2),A
	LD	DE,FCB_2
	LD	A,01H
	RCALL	SCANNER
	RCALL	SCAN_SW
	RLD	(SW_MSK3),A
	XOR	A
	LD	(007CH),A
	RLD	HL,LINE
	LD	A,(HL)
	OR	A
	JR	NZ,L0087B
	INC	HL
	LD	A,(HL)
	CP	20H
	RET	Z
	RLD	HL,CMD_MSG	;puntero de comandos
	LD	C,17H
L0085F:	LD	B,08H
	RLD	DE,LINE+1
L00864:	LD	A,(DE)
	CP	(HL)
	JR	NZ,L00871
	INC	HL
	INC	DE
	DJNZ	L00864
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	EX	DE,HL
	JP	(HL)
;
L00871:	INC	HL
	DJNZ	L00871
	INC	HL
	INC	HL
	DEC	C
	JR	NZ,L0085F
	JR	L00891
;
L0087B:	CP	0FFH
	RLD	DE,MSG03
	RJP	Z,ERR_REENT
	LD	E,A
	DEC	E
	INC	HL
	LD	A,(HL)
	CP	20H
	JR	NZ,L00891
	LD	C,0EH
	CALL	BDOS
	RET
;
L00891:	RLD	A,(LINE+9)
	CP	20H
	JR	NZ,L008C7
	RLD	DE,LINE+9
	LD	B,03H
	RCALL	L0120A
	RLD	DE,FCB_3
	LD	C,1AH
	CALL	BDOS
	LD	C,11H
L008AA:	RLD	DE,LINE
	CALL	BDOS
	OR	A
	JR	NZ,L008C7
	RLD	HL,MSG_BAT
	RCALL	CHECK_EXT
	JR	Z,BATCH_EXE
	RLD	HL,MSG_COM
	RCALL	CHECK_EXT
	RJP	Z,COM_EXE
	LD	C,12H
	JR	L008AA
;
L008C7:	RLD	DE,MSG04
	RJP	ERR_REENT
;
CHECK_EXT:
	RLD	DE,FCB_3+9
	LD	B,03H
	RCALL	STR_CP
	RET	NZ
	RLD	DE,FCB_3
	LD	C,0FH
	CALL	BDOS
	LD	HL,0000H
	RLD	(FCB_3+33),HL
	RLD	(FCB_3+35),HL
	INC	HL
	RLD	(FCB_3+14),HL
	XOR	A
	RET

	SUBTTL	Ejecucion de BATCH
	PAGE
;
; EJECUCION DE BATCH
;
BATCH_EXE:
	RLD	HL,DOS_X
	LD	B,14H
	XOR	A
L008F3:	LD	(HL),A
	INC	HL
	DJNZ	L008F3
	RLD	DE,DOS_X2
	RLD	HL,BUFFER+1
	LD	C,(HL)
	LD	B,00H
	INC	BC
	INC	HL
	LDIR
	RLD	HL,DOS_X2
	RLD	DE,DOS_X
	LD	B,0AH
	JR	L00920
;
L0090E:	INC	HL
	LD	A,(HL)
	RCALL	CHCK_2
	JR	C,L0092E
	JR	NZ,L0090E
	RCALL	SKIP_SP
	RCALL	CHCK_2
	JR	NZ,L00920
	INC	HL
L00920:	RCALL	SKIP_SP
	JR	C,L0092E
	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	EX	DE,HL
	DEC	HL
	DJNZ	L0090E
L0092E:	RLD	HL,FCB_3
	RLD	DE,DOS_FCB
	LD	BC,0025H
	LDIR
	LD	A,01H
	RLD	(BAT_FL),A
	RET

	SUBTTL	Carga y ejecucion de un .COM
	PAGE

;
COM_EXE:
	RLD	DE,MSG26
	RCALL	L0148A
	RLD	HL,(FCB_3+18)
	LD	A,L
	OR	H
	JR	NZ,L0097E
	RLD	HL,(FCB_3+16)
	RLD	DE,DOS-(25H+STACK2-STACK)-255
	SBC	HL,DE
	JR	NC,L0097E
	RLD	HL,DOS-(25H+STACK2-STACK)
	LD	SP,HL
	EX	DE,HL
	RLD	HL,STACK
	LD	BC,STACK2-STACK
	LDIR
	RLD	HL,FCB_3
	LD	BC,0025H
	LDIR
	LD	DE,0100H
	LD	C,1AH
	CALL	BDOS
	RLD	HL,(FCB_3+16)
	RLD	DE,DOS-25H
	LD	C,27H
	JP	BDOS
;
L0097E:	RLD	DE,MSG05
	RJP	ERR_REENT
;
STACK:
	RDW	DOS-25H-(STACK2-STACK1)
	DW	0100H
	DW	0
STACK1:
	LD	DE,DEF_DMA
	LD	C,1AH
	JP	BDOS
STACK2:


	SUBTTL	Comando DIR.
	PAGE
;
; COMANDO DIR
;
DIR_CMD:
	RCALL	CK_DRV
	LD	DE,FCB_1+1
	RCALL	FILL11
	LD	HL,DEF_DMA+1
	RCALL	SCAN_SW
	LD	DE,FCB_1
	LD	A,0DH
	RCALL	SCANNER
	RLD	A,(SW_MSK2)
	RLD	HL,SW_MSK1
	OR	(HL)
	LD	(HL),A
	AND	01H
	LD	A,01H
	JR	Z,L009C5
	LD	A,(0F3B0H)
	ADD	A,04H
	RRCA
	RRCA
	RRCA
	RRCA
	AND	0FH
	JR	NZ,L009C5
	INC	A
L009C5:	RLD	(DIR2),A
	RLD	(DIR3),A
	LD	A,17H
	RLD	(DIR4),A
	XOR	A
	RLD	(DIR1),A
	LD	A,(FCB_1)
	OR	80H
	LD	(FCB_1),A
	LD	C,11H
	RCALL	L012E1
L009E1:	RJP	NZ,L00ADF
	RLD	A,(FCB_3+13)
	AND	0EH
	RJP	NZ,L00AD9
	RLD	HL,DIR1
	INC	(HL)
	RCALL	DSP_FLN
	RLD	A,(SW_MSK1)
	AND	01H
	RJP	NZ,L00AA5
	RLD	A,(FCB_3+13)
	AND	10H
	JR	Z,L00A0C
	RLD	DE,MSG06
	LD	C,09H
	CALL	BDOS
	JR	L00A26
;
L00A0C:	LD	A,(0F3DDH)
	DEC	A
	RJP	Z,L00AA5
	ADD	A,07H
	LD	HL,0F3B0H
	CP	(HL)
	RJP	NC,L00AA5
	RLD	HL,(FCB_3+29)
	RLD	DE,(FCB_3+31)
	RCALL	L01426
L00A26:	RLD	HL,(FCB_3+25)
	LD	A,L
	OR	H
	JR	Z,L00AA5
	LD	A,(0F3DDH)
	DEC	A
	JR	Z,L00AA5
	ADD	A,08H
	PUSH	HL
	LD	HL,0F3B0H
	CP	(HL)
	POP	HL
	JR	NC,L00AA5
	RCALL	DSP_SP
	LD	A,L
	AND	1FH
	LD	E,A
	LD	C,H
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	A,H
	AND	0FH
	LD	D,A
	LD	B,00H
	SRL	C
	LD	HL,L007BC
	ADD	HL,BC
	RCALL	L01300
	LD	A,(0F30EH)
	OR	A
	LD	B,08H
	JR	Z,L00A66
	LD	B,06H
	RCALL	L01401
	LD	B,02H
L00A66:	INC	HL
	INC	HL
	RCALL	L01401
	RLD	HL,(FCB_3+23)
	LD	A,L
	OR	H
	JR	Z,L00AA5
	LD	A,(0F3DDH)
	DEC	A
	JR	Z,L00AA5
	ADD	A,06H
	PUSH	HL
	LD	HL,0F3B0H
	CP	(HL)
	POP	HL
	JR	NC,L00AA5
	RCALL	DSP_SP
	LD	DE,0000H
	LD	B,H
	SRL	B
	SRL	B
	SRL	B
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	A,H
	AND	3FH
	LD	L,A
	LD	H,B
	RCALL	L01351
	LD	B,05H
	RCALL	L01401
	RLD	A,(L017DE)
	RCALL	DSP_BYT
L00AA5:	RLD	HL,DIR3
	DEC	(HL)
	JR	Z,L00AB2
	LD	A,09H
	RCALL	DSP_BYT
	JR	L00AD9
;
L00AB2:	RLD	A,(DIR2)
	RLD	(DIR3),A
	LD	A,(0F3DDH)
	DEC	A
	JR	NZ,L00AC4
	RLD	DE,MSG29
	RCALL	L0148A
L00AC4:	RCALL	DSP_CR
	RLD	A,(SW_MSK1)
	AND	02H
	JR	Z,L00AD9
	RLD	HL,DIR4
	DEC	(HL)
	JR	NZ,L00AD9
	LD	(HL),17H
	RCALL	PAUSE
L00AD9:	RCALL	L012D7
	RJP	L009E1
;
L00ADF:	RLD	A,(DIR1)
	OR	A
	RLD	DE,MSG09
	RJP	Z,ERR_REENT
	RLD	HL,(DIR2)
	LD	A,H
	CP	L
	JR	Z,L00AF3
	RCALL	DSP_CR
L00AF3:	RCALL	L01409
	LD	A,(0F3B0H)
	CP	22H
	PUSH	AF
	RCALL	NC,DSP_SP
	POP	AF
	RCALL	C,DSP_CR
	LD	A,(FCB_1)
L00B06:	AND	7FH
	LD	E,A
	LD	C,1BH
	CALL	BDOS
	PUSH	HL
	LD	E,A
	LD	D,00H
	RCALL	L013B0
	POP	DE
	RCALL	L013B0
	EX	DE,HL
	LD	L,C
	LD	H,B
	RCALL	L01426
	RLD	DE,MSG08
	RJP	ERR_REENT

	SUBTTL	Comando TYPE.
	PAGE

;
; Comando TYPE.
;
TYPE_CMD:
	RCALL	CK_DRV
	LD	HL,DEF_DMA+1
	RCALL	SCAN_SW
	AND	2
	RLD	(DIR2),A
	JR	Z,TYPE1
	LD	A,(0F3B1H)
	DEC	A
	LD	C,A
	LD	A,(0F3DEH)
	OR	A
	LD	A,C
	JR	Z,TYP1
	DEC	A
TYP1:	RLD	(DIR1),A
TYPE1:	LD	DE,0100H
	LD	C,1AH
	CALL	BDOS
	LD	DE,FCB_1
	LD	C,0FH
	CALL	BDOS
	OR	A
	RLD	DE,MSG09
	RJP	NZ,ERR_REENT
	LD	HL,0000H
	LD	(007DH),HL
	LD	(007FH),HL
	INC	HL
	LD	(006AH),HL
L00B4C:	LD	DE,FCB_1
	RLD	HL,RESID-100H
	LD	C,27H
	CALL	BDOS
	LD	A,L
	OR	H
	JR	Z,L00B6E
	LD	DE,0100H
L00B5E:	LD	A,(DE)
	INC	DE
	CP	1AH
	JR	Z,L00B6E
	RCALL	DSP_BYT
	CP	0AH
	PUSH	DE
	PUSH	HL
	RCALL	Z,TYPE2
	POP	HL
	POP	DE
	DEC	HL
	LD	A,L
	OR	H
	JR	NZ,L00B5E
	JR	L00B4C
;
L00B6E:	RJP	DSP_CR

TYPE2:	RLD	A,(DIR2)
	OR	A
	RET	Z
	RLD	A,(DIR1)
	DEC	A
	OR	A
	JR	Z,TYPE3
	RLD	(DIR1),A
	RET

TYPE3:	LD	A,(0F3B1H)
	DEC	A
	LD	C,A
	LD	A,(0F3DEH)
	OR	A
	LD	A,C
	JR	Z,TYP3
	DEC	A
TYP3:	RLD	(DIR1),A
	RJP	PAUSE


	SUBTTL	Comando PAUSE.
	PAGE

;
; Comando PAUSE.
; Imprime mensaje y espera tecla.
;
PAUSE_CMD:
PAUSE:
	RLD	DE,MSG02
	RJP	L013E7

	SUBTTL	Comando REN - RENAME.
	PAGE
;
; Comando REN - RENAME
;
REN_CMD:
RENAME_CMD:
	RCALL	CK_DRV
	LD	DE,FCB_1
	LD	C,17H
	CALL	BDOS
	OR	A
	RET	Z
	RLD	DE,MSG11
	RJP	ERR_REENT

	SUBTTL	Comando DEL - ERASE.
	PAGE
;
; Comando DEL - ERASE.
;
DEL_CMD:
ERASE_CMD:
	RCALL	CK_DRV
; *.* ?
	LD	B,0BH
	LD	HL,FCB_1+1
	LD	A,'?'
L00B94:	CP	(HL)
	INC	HL
	JR	NZ,L00BB5	; NO
	DJNZ	L00B94

L00B9A:	RLD	DE,MSG10	; SI
	LD	C,09H
	CALL	BDOS
	LD	C,01H
	CALL	BDOS
	PUSH	AF
	RCALL	DSP_CR
	POP	AF
	AND	5FH
	CP	'N'
	RET	Z
	CP	'S'
	JR	NZ,L00B9A
L00BB5:	LD	DE,FCB_1
	LD	C,13H	; DELETE
	CALL	BDOS
	OR	A
	RET	Z
	RLD	DE,MSG09
	RJP	ERR_REENT

	SUBTTL	Comando VERIFY.
	PAGE
;
; Comando VERIFY
;
VERIFY_CMD:
	LD	HL,FCB_1+1
	LD	A,(HL)
	CP	'O'
	JR	NZ,L00BEA
	INC	HL
	LD	A,(HL)
	CP	'N'
	LD	E,01H
	JR	Z,L00BDE	; ON
	CP	'F'
	JR	NZ,L00BEA
	INC	HL
	CP	(HL)
	JR	NZ,L00BEA
	DEC	E		; OFF
L00BDE:	INC	HL
	LD	A,(HL)
	CP	' '
	JR	NZ,L00BEA
	LD	C,2EH
	CALL	BDOS
	RET
;
L00BEA:	RLD	DE,MSG12
	RJP	ERR_REENT

	SUBTTL	Comando COPY.
	PAGE

;
; Comando COPY.
;
COPY_CMD:
	RLD	(L0183A),SP
	XOR	A
	RLD	(L01852),A
	RLD	(DIR1),A
	LD	HL,0100H
	RLD	(L0183C),HL
	RLD	(L0184A),HL
	LD	HL,DEF_DMA+1
	RCALL	SCAN_SW
	LD	DE,FCB_1
	RCALL	L00D6B
	RLD	(L0184C),HL
L00C13:	RCALL	L00D5B
	JR	NZ,L00C13
	RLD	DE,FCB_3
	RCALL	L00D6B
	LD	A,C
	RLD	(SW_MSK3),A
	JR	NZ,L00C28
	INC	DE
	RCALL	FILL11
L00C28:	RLD	HL,FCB_3
	RLD	DE,L0183E
	LDI
	LD	IX,FCB_1+1
	RCALL	L00D93
	RLD	HL,L0183F
	RCALL	L012F3
	LD	E,A
	XOR	01H
	LD	C,A
	LD	HL,FCB_1+1
	RCALL	L012F3
	AND	C
	LD	C,A
	RLD	A,(L01852)
	OR	C
	RLD	(L01851),A
	RLD	(L0184E),A
	ADD	A,A
	OR	E
	RLD	(L01853),A
	RLD	A,(SW_MSK1)
	RCALL	L00DA5
	RLD	A,(SW_MSK2)
	RCALL	L00DA5
	RLD	(SW_MSK1),A
	LD	C,11H
	RCALL	L012E1
	RLD	DE,MSG09
	RJP	NZ,ERR_REENT
L00C72:	RLD	A,(L01853)
	AND	01H
	JR	Z,L00C7F
	RLD	A,(BAT_FL)
	OR	A
	JR	Z,L00C76
	LD	A,(ECHO_FL)
	OR	A
	JR	Z,L00C7F
L00C76:	RCALL	DSP_FLN
	RCALL	DSP_CR
L00C7F:	RCALL	L00DB9
	RLD	HL,L0183E
	LDI
	RLD	IX,FCB_3+1
	RCALL	L00D93
	XOR	A
	LD	(DE),A
	RLD	(L0184F),A
	RLD	(L01850),A
	RCALL	L00DFE
	JR	NZ,L00CD6
	RLD	A,(L01853)
	AND	02H
	RLD	DE,MSG13
	RJP	Z,L00D47
	LD	A,01H
	RLD	(L0184F),A
	RLD	IY,(L0183C)
	LD	(IY+27H),01H
	RLD	A,(L01851)
	OR	A
	JR	NZ,L00CD3
	RLD	DE,FCB_3
	LD	C,0FH
	CALL	BDOS
	RLD	HL,(L0183C)
	LD	DE,0021H
	ADD	HL,DE
	EX	DE,HL
	RLD	HL,FCB_3+16
	LD	BC,0004H
	LDIR
	JR	L00CD9
;
L00CD3:	RLD	(L01850),A
L00CD6:	RCALL	L00E0E
L00CD9:	RLD	A,(L01853)
	AND	01H
	JR	Z,L00D25
	RLD	HL,FCB_3+1
	RLD	DE,L01854
	LD	BC,000BH
	LDIR
	RLD	HL,(L0184C)
L00CEE:	RCALL	L00D5B
	JR	Z,L00D06
	PUSH	HL
	RLD	HL,FCB_3+1
	LD	E,L
	LD	D,H
	RLD	IX,L01854
	RCALL	L00D93
	RCALL	L00DEB
	POP	HL
	JR	L00CEE
;
L00D06:	RCALL	L00F77
	RLD	A,(SW_MSK1)
L00D0B	EQU	$-01
;
	RLD	(L01851),A
	RCALL	L012D7
	RJP	Z,L00C72
	JR	L00D3B
;
L00D17:	LD	C,11H
	RCALL	L012E1
	RLD	DE,MSG09
	RJP	NZ,ERR_REENT
L00D22:	RCALL	L00DEB
L00D25:	RCALL	L012D7
	JR	Z,L00D22
	RLD	HL,(L0184C)
	LD	DE,FCB_1
	RCALL	L00D5E
	RLD	(L0184C),HL
	JR	NZ,L00D17
	RCALL	L00F77
L00D3B:	RCALL	L00EBF
	RLD	A,(BAT_FL)
	OR	A
	JR	Z,L00D3Q
	LD	A,(ECHO_FL)
	OR	A
	RET	Z
L00D3Q:	RCALL	L01409
	RLD	DE,MSG18
	RJP	ERR_REENT
;
L00D47:	RLD	SP,(L0183A)
	RLD	HL,(L0183C)
	RLD	(L0184A),HL
	LD	C,09H
	CALL	BDOS
	RCALL	DSP_CR
	JR	L00D3B
;
L00D5B:	RLD	DE,FCB_3
L00D5E:	RCALL	SKIP_SP
	CP	2BH
	JR	NZ,L00D8B
	LD	A,01H
	RLD	(L01852),A
	INC	HL
L00D6B:	PUSH	DE
	LD	A,01H
	RCALL	SCANNER
	POP	DE
	LD	A,(DE)
	CP	0FFH
	JR	Z,L00D8D
	OR	A
	JR	NZ,L00D7F
	RLD	A,(DFL_DRV)
	INC	A
	LD	(DE),A
L00D7F:	RCALL	SCAN_SW
	RCALL	L00DA5
	INC	DE
	LD	A,(DE)
	DEC	DE
	CP	20H
	RET
;
L00D8B:	XOR	A
	RET
;
L00D8D:	RLD	DE,MSG03
	RJP	L00D47
;
L00D93:	LD	B,0BH
L00D95:	LD	A,(HL)
	INC	HL
	CP	3FH
	JR	NZ,L00D9E
	LD	A,(IX+00H)
L00D9E:	LD	(DE),A
	INC	DE
	INC	IX
	DJNZ	L00D95
	RET
;
L00DA5:	AND	18H
	RJP	PE,L00DB4
	AND	08H
	RLD	(L01851),A
	JR	Z,L00DB4
	RLD	(L0184E),A
L00DB4:	RLD	A,(L01851)
	OR	A
	RET
;
L00DB9:	RLD	HL,(L0184A)
	RLD	DE,RESID-012EH 
	OR	A
	SBC	HL,DE
	RCALL	NC,L00EBF
	RLD	HL,(L0184A)
	RLD	(L0183C),HL
	EX	DE,HL
	LD	HL,002DH
	ADD	HL,DE
	RLD	(L0184A),HL
	LD	HL,0021H
	ADD	HL,DE
	LD	B,08H
	XOR	A
L00DDA:	LD	(HL),A
	INC	HL
	DJNZ	L00DDA
	PUSH	DE
	POP	IY
	RLD	HL,(L0184A)
	LD	(IY+25H),L
	LD	(IY+26H),H
	RET
;
L00DEB:	RCALL	L00DFE
	JR	NZ,L00E0E
	RLD	A,(L0184F)
	OR	A
	RET	NZ
	RLD	DE,MSG14
	LD	C,09H
	CALL	BDOS
	RET
;
L00DFE:	RLD	HL,(L0183C)
	RLD	DE,FCB_3
	LD	B,0CH

STR_CP:
;
; Compara strings.
; (HL) - (de) * (B)
; 
	LD	A,(DE)
	CP	(HL)
	RET	NZ
	INC	HL
	INC	DE
	DJNZ	STR_CP
	RET
;
L00E0E:	LD	HL,0000H
	RLD	(FCB_3+33),HL
	RLD	(FCB_3+35),HL
L00E17:	XOR	A
	RLD	(FCB_3+12),A
	RLD	DE,FCB_3
	LD	C,0FH
	CALL	BDOS
	OR	A
	RET	NZ
	RLD	HL,(L0183C)
	LD	DE,0029H
	ADD	HL,DE
	EX	DE,HL
	RLD	HL,FCB_3+20
	LD	BC,0004H
	LDIR
	LD	HL,0001H
	RLD	(FCB_3+14),HL
	RLD	DE,(L0184A)
	PUSH	DE
	LD	C,1AH
	CALL	BDOS
	POP	DE
	RLD	HL,RESID-1
	OR	A
	SBC	HL,DE
	RLD	DE,FCB_3
	LD	C,27H
	CALL	BDOS
	EX	DE,HL
	RLD	HL,(L0184A)
	ADD	HL,DE
	RLD	A,(L01851)
	OR	A
	JR	Z,L00E6F
	LD	A,E
	OR	D
	JR	Z,L00E6F
	RLD	HL,(L0184A)
	LD	B,D
	LD	C,E
	LD	A,1AH
	CPIR
	JR	NZ,L00E6F
	DEC	HL
L00E6F:	RLD	IY,(L0183C)
	RLD	A,(L01850)
	OR	A
	JR	NZ,L00E8D
	RLD	(L0184A),HL
	LD	(IY+25H),L
	LD	(IY+26H),H
	RLD	DE,RESID-1
	SBC	HL,DE
	RET	NZ
	RCALL	L00EBF
	JR	L00E17
;
L00E8D:	PUSH	HL
	RLD	HL,(L0183C)
	LD	DE,002DH
	ADD	HL,DE
	EX	DE,HL
L00E96:	POP	HL
	PUSH	HL
	SBC	HL,DE
	LD	E,(IY+21H)
	LD	D,(IY+22H)
	ADD	HL,DE
	LD	(IY+21H),L
	LD	(IY+22H),H
	JR	NC,L00EB1
	INC	(IY+23H)
	JR	NZ,L00EB1
	INC	(IY+24H)
L00EB1:	POP	HL
	RLD	DE,RESID-1
	SBC	HL,DE
	RJP	Z,L00E17
	XOR	A
	RLD	(L01850),A
	RET
;
L00EBF:	RLD	HL,(L0184A)
	LD	(HL),0FFH
	LD	HL,0100H
	RLD	(L0184A),HL
L00ECA:	LD	A,(HL)
	INC	A
	RET	Z
	RLD	(L0183C),HL
	LD	DE,0100H
	LD	BC,002DH
	LDIR
	RCALL	L00EFA
	LD	A,(0128H)
	OR	A
	JR	Z,L00EEA
	RLD	HL,DIR1
	INC	(HL)
	LD	HL,(0125H)
	JR	L00ECA
;
L00EEA:	LD	HL,0100H
	RLD	(L0183C),HL
	LD	HL,012DH
	LD	(0125H),HL
	RLD	(L0184A),HL
	RET
;
L00EFA:	LD	A,(0127H)
	OR	A
	JR	NZ,L00F15
	INC	A
	LD	(0127H),A
	LD	DE,0100H
	LD	C,16H
	CALL	BDOS
	OR	A
	RLD	DE,MSG15
	RJP	NZ,L00D47
	JR	L00F24
;
L00F15:	LD	DE,0100H
	LD	C,0FH
	CALL	BDOS
	OR	A
	RLD	DE,MSG16
	RJP	NZ,L00D47
L00F24:	LD	HL,0001H
	LD	(010EH),HL
	RLD	HL,(L0183C)
	LD	DE,002DH
	ADD	HL,DE
	EX	DE,HL
	LD	HL,(0125H)
	SBC	HL,DE
	PUSH	HL
	LD	C,1AH
	CALL	BDOS
	POP	HL
	LD	DE,0100H
	LD	C,26H
	CALL	BDOS
	PUSH	AF
	RLD	A,(L0184E)
	OR	A
	JR	NZ,L00F58
	LD	HL,0129H
	LD	DE,0114H
	LD	BC,0004H
	LDIR
L00F58:	LD	DE,0100H
	LD	C,10H
	CALL	BDOS
	POP	AF
	OR	A
	RET	Z
	RLD	A,(L0184F)
	OR	A
	JR	NZ,L00F71
	LD	DE,0100H
	LD	C,13H
	CALL	BDOS
L00F71:	RLD	DE,MSG17
	RJP	L00D47
;
L00F77:	RLD	IY,(L0183C)
	LD	(IY+28H),01H
	RLD	A,(SW_MSK3)
	RCALL	L00DA5
	RET	Z
	RLD	HL,(L0184A)
	LD	(HL),1AH
	INC	HL
	RLD	(L0184A),HL
	LD	(IY+25H),L
	LD	(IY+26H),H
	RET

	SUBTTL	Comando DATE.
	PAGE

;
; Comando DATE
;
DATE_CMD:
	LD	HL,DEF_DMA+1
	RCALL	GTNUM_?
	JR	NZ,L00FDF
	RLD	DE,MSG19
	LD	C,09H
	CALL	BDOS
	LD	C,2AH
	CALL	BDOS
	PUSH	HL
	LD	C,A
	ADD	A,A
	ADD	A,C
	LD	C,A
	LD	B,00H
	RLD	HL,MSG_DAY
	ADD	HL,BC
	LD	B,03H
	RCALL	L01401
	RCALL	DSP_SP
	POP	HL
	RCALL	L01300
	LD	B,0AH
	LD	A,(0F30EH)
	OR	A
	JR	NZ,L00FD5
	LD	A,(0F3B0H)
	CP	1EH
	JR	NC,L00FD5
	LD	B,08H
	INC	HL
	INC	HL
L00FD5:	RCALL	L01401
L00FD8:	RLD	DE,MSG21
	RCALL	L01251
	RET	Z
L00FDF:	JR	C,L01032
	LD	B,A
	LD	A,(0F30EH)
	OR	A
	LD	A,B
	JR	NZ,L01001
	RCALL	L01040
	JR	C,L01032
	RCALL	L01073
	JR	C,L01032
	LD	D,A
	LD	A,(HL)
	INC	HL
	CP	B
	JR	NZ,L01032
	RCALL	RD_NUM
	JR	C,L01032
	LD	E,A
	JR	L0101E
;
L01001:	LD	D,A
	RCALL	L01073
	JR	C,L01032
	LD	E,A
	LD	A,(HL)
	INC	HL
	CP	B
	JR	NZ,L01014
	RCALL	L0103C
	JR	C,L01032
	JR	L0101E
;
L01014:	PUSH	DE
	LD	C,2AH
	CALL	BDOS
	PUSH	HL
	POP	IX
	POP	DE
L0101E:	LD	A,(0F30EH)
	CP	02H
	JR	C,L01028
	LD	A,E
	LD	E,D
	LD	D,A
L01028:	PUSH	IX
	POP	HL
	LD	C,2BH
	CALL	BDOS
	OR	A
	RET	Z
L01032:	RLD	DE,MSG20
	LD	C,09H
	CALL	BDOS
	JR	L00FD8
;
L0103C:	RCALL	RD_NUM
	RET	C
L01040:	LD	B,A
	RCALL	L01286
	JR	C,L0105E
	DEC	HL
	RCALL	RD_NUM
	RET	C
	PUSH	HL
	LD	C,A
	PUSH	BC
L0104E:	LD	C,B
	LD	B,00H
	PUSH	DE
	LD	DE,0064H
	RCALL	L013B0
	POP	DE
	POP	HL
	LD	H,00H
	JR	L0106D
;
L0105E:	PUSH	HL
	LD	C,B
	LD	B,00H
	LD	HL,076CH
	LD	A,C
	CP	50H
	JR	NC,L0106D
	LD	HL,07D0H
L0106D:	ADD	HL,BC
	PUSH	HL
	POP	IX
	POP	HL
	RET
;
L01073:	LD	A,(HL)
	INC	HL
	LD	B,A
	CP	2FH
	JR	Z,L01082
	CP	2EH
	JR	Z,L01082
	CP	2DH
	SCF
	RET	NZ
L01082:	RJP	RD_NUM

	SUBTTL	Comando TIME.
	PAGE
;
; Comando TIME
;
TIME_CMD:
	LD	HL,DEF_DMA+1
	RCALL	GTNUM_?
	JR	NZ,L010AF
	RLD	DE,MSG22
	LD	C,09H
	CALL	BDOS
	LD	C,2CH
	CALL	BDOS
	RCALL	L01351
	LD	B,0CH
	RCALL	L01401
L010A2:	RLD	HL,(L017DE)
	RLD	(L017DB),HL
	RLD	DE,MSG24
	RCALL	L01251
	RET	Z
L010AF:	JR	C,L010F2
	LD	B,A
	LD	DE,0000H
	LD	A,(HL)
	INC	HL
	CP	3AH
	JR	NZ,L010CE
	RCALL	RD_NUM
	JR	C,L010F2
	LD	E,A
	LD	A,(HL)
	INC	HL
	CP	3AH
	JR	NZ,L010CE
	RCALL	RD_NUM
	JR	C,L010F2
	LD	D,A
	LD	A,(HL)
L010CE:	LD	L,E
	LD	H,B
	LD	E,00H
	CP	0DH
	JR	Z,L010EB
	AND	5FH
	CP	'A'
	JR	Z,L010FC
	CP	50H
	JR	NZ,L010F2
	LD	A,H
	CP	0CH
	JR	NC,L010EB
	OR	A
	JR	Z,L010F2
	ADD	A,0CH
	LD	H,A
L010EB:	LD	C,2DH
	CALL	BDOS
	OR	A
	RET	Z
L010F2:	RLD	DE,MSG23
	LD	C,09H
	CALL	BDOS
	JR	L010A2
;
L010FC:	LD	A,H
	CP	0DH
	JR	NC,L010F2
	SUB	0CH
	JR	NZ,L010EB
	LD	H,A
	JR	L010EB

	SUBTTL	Comando MODE.
	PAGE
;
; Comando MODE
;
MODE_CMD:
	LD	HL,DEF_DMA+1
	RCALL	SKIP_SP
	RCALL	RD_NUM
	JR	C,L0114A
	OR	A
	JR	Z,L0114A
	CP	51H
	JR	NC,L0114A
	CP	29H
	JR	C,L01126
	LD	B,A
	LD	A,(0FAF8H)
	OR	A
	JR	Z,L0114A
	LD	A,B
L01126:	LD	B,A
	RCALL	SKIP_SP
	CP	0DH
	JR	NZ,L0114A
	LD	A,B
	CP	21H
	JR	NC,L0113C
	LD	(0F3AFH),A
	LD	IX,006FH
	JR	L01143
;
L0113C:	LD	(0F3AEH),A
	LD	IX,FCB_2
L01143:	LD	IY,(0FCC0H)
	JP	001CH
;
L0114A:	RLD	DE,MSG12
	RJP	ERR_REENT

	SUBTTL	Comandos CLS, BASIC, VER, BEEP, ECHO, COLOR, INPUT, IF y FORMAT.
	PAGE
;
; Comando BASIC.
;
BASIC_CMD:
	CALL	EN_PAGE
	JP	4022H
;
; Comando VER
;
VER_CMD:RLD	DE,MSG_VER
	LD	C,9
	JP	BDOS

;
; Comando FORMAT.
;
FORMAT_CMD:
	LD	HL,0100H
	RLD	BC,INPUT
	CALL	EN_PAGE
	CALL	4025H
	CALL	RS_PAGE
	RLD	DE,MSG_FOR
	LD	C,9
	CALL	BDOS
	LD	C,1
	CALL	BDOS
	CP	'S'
	JR	Z,FORMA1
	CP	's'
	JR	Z,FORMA1
	RJP	DSP_CR
FORMA1:	RCALL	DSP_CR
	JR	FORMAT_CMD
;
;  Comando CLS
;
CLS_CMD:
	RLD	DE,CLS_MSG
	LD	C,9
	JP	BDOS

CLS_MSG: DB	0CH,'$'

;
;  Comando BEEP
;	

BEEP_CMD:
	LD	HL,DEF_DMA+1
	RCALL	SKIP_SP
	CP	0DH
	LD	B,1
	JR	Z,BEEP
	RCALL	RD_NUM
	LD	B,1
	JR	C,BEEP
	LD	B,A
BEEP:	LD	A,7
	RCALL	DSP_BYT
	PUSH	BC
	LD	B,5
BEEP1:	HALT
	DJNZ	BEEP1
	POP	BC
	DJNZ	BEEP
	RET
;
;  Comando ECHO
;

ECHO_CMD:
	LD	HL,FCB_1+1
	LD	A,(HL)
	CP	'O'
	JR	NZ,ECHO1
	INC	HL
	LD	A,(HL)
	CP	'N'
	JR	Z,ECHO_SI
	CP	'F'
	JR	NZ,ECHO1
	INC	HL
	LD	A,(HL)
	CP	'F'
	JR	Z,ECHO_NO
ECHO1:	LD	HL,81H
	LD	A,(HL)
	CP	0DH
	JR	Z,ECHO2
	INC	HL
ECH_LOP:LD	A,(HL)
	CP	' '
	JR	C,ECHO2
	RCALL	DSP_BYT
	INC	HL
	DJNZ	ECH_LOP
ECHO2:	RJP	DSP_CR

ECHO_NO:XOR	A
ECHO_SI:LD	(ECHO_FL),A
	RET

FGCOL	EQU	0F3E9H
BGCOL	EQU	0F3EAH
BDCOL	EQU	0F3EBH

;
;  Comando COLOR
;

COLOR_CMD:
	LD	HL,DEF_DMA+1
	RCALL	COLOR4
	LD	(FGCOL),A
	RCALL	COLOR4
	LD	(BGCOL),A
	RCALL	COLOR4
	LD	(BDCOL),A
FIN_COL:LD	A,(0FCC1H)
	LD	(SLT),A
	RST	30H
SLT:	DB	0
	DW	062H
	RET

COLOR4:	RCALL	SKIP_SP
	CP	0DH
	POP	DE
	JR	Z,FIN_COL
	PUSH	DE
	RCALL	RD_NUM
	JR	C,COL
	CP	16
	JR	NC,COL
	RET

COL:	POP	DE
	RJP	L0114A

;
; Comando INPUT
;

INPUT_CMD:
	LD	HL,81H
	LD	A,(HL)
	CP	0DH
	JR	Z,INPUT2
	INC	HL
INP_LOP:LD	A,(HL)
	CP	' '
	JR	C,INPUT2
	RCALL	DSP_BYT
	INC	HL
	DJNZ	INP_LOP
INPUT2:	RCALL	DSP_SP
	LD	A,'?'
	RCALL	DSP_BYT
	RCALL	DSP_SP
INPUT3:	LD	C,1
	CALL	BDOS
	CP	' '
	RLD	(INP_UT),A
	RJP	NC,DSP_CR
	LD	A,7
	RCALL	DSP_BYT
	JR	INPUT3

;
; Comando IF
;

IF_CMD:
	LD	HL,DEF_DMA+1
	RCALL	SKIP_SP
	PUSH	HL
	RLD	HL,INP_UT
	CP	(HL)
	POP	HL
	RET	NZ
	INC	HL
	RCALL	SKIP_SP
	RLD	DE,BUFFER+2
	LD	B,1
IF_1:	LD	A,(HL)
	CP	0DH
	LD	(DE),A
	JR	Z,IF_2
	INC	HL
	INC	DE
	INC	B
	JR	IF_1	
IF_2:	LD	A,B
	RLD	(BUFFER+1),A
	RJP	L007F2

;
; Comando WAIT
;

WAIT_CMD:
	LD	HL,DEF_DMA+1
	RCALL	SKIP_SP
	CP	0DH
	RET	Z
	RCALL	RD_NUM
	RET	C
	LD	B,50
	LD	E,A
	LD	D,0
	PUSH	DE
	POP	HL
WAIT1:	ADD	HL,DE
	DJNZ	WAIT1	
	PUSH	HL
	POP	BC
WAIT2:	HALT
	DEC	BC
	LD	A,C
	OR	B
	RET	Z
	JR	WAIT2



	SUBTTL	SCANNER.
	PAGE

	.COMMENT%

Esta rutina copia del (HL) al (DE)
dando formato.El formato es:


1      8       3    1  1  1  1   <- Bytes

00  XXXXXXXX  XXX  00 00 00 00 

|   ||||||||  |||  || || || ||
|   ||||||||  |||  ++-++-++-++- 4 Bytes con 0.
|   ||||||||  |||
|   ||||||||  +++---  EXT ( Si encuentra '.' en texto )
|   ||||||||
|   ++++++++--- FLN =  filename
|
+----------- DRIVE = 0 Si no encuentra 'X:'
                     X-40H Si encuentra.
                     FFH si es incorrecto.
 
 PARAMETROS:

 (Acc)= 76543210
	|||||||+-- 0= No saltea delim.
	|||||||    1= saltea
	||||||+--- 0= Inic. DRIVE con 0
        ||||||     1= No
	|||||+---- 0= Inic. con SP FLN
        |||||      1= No
        ||||+----- 0= Inic. con SP EXT
        ||||       1= No
        ||||
        ++++------ No utilizados.

	%

;
SCANNER:
	PUSH	DE
	EX	DE,HL
	BIT	1,A
	JR	NZ,L01170
	LD	(HL),00H
L01170:	INC	HL
	LD	BC,0008H
	BIT	2,A
	RCALL	Z,SP_FILL
	ADD	HL,BC
	LD	C,03H
	BIT	3,A
	RCALL	Z,SP_FILL
	ADD	HL,BC
	LD	(HL),B
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),B
	EX	DE,HL
	POP	DE
	BIT	0,A
	JR	Z,L01198
	RCALL	SKIP_SP
	RCALL	CHCK_2
	JR	NZ,L0119B
	INC	HL
L01198:	RCALL	SKIP_SP
L0119B:	RCALL	SYN_CHK
	JR	C,L011BF
	JR	Z,L011BF
	LD	C,A
	INC	HL
	LD	A,(HL)
	DEC	HL
	CP	':'
	LD	A,C
	JR	NZ,L011BF
	INC	HL
	INC	HL
	SUB	'A'
	JR	C,L011B9
	PUSH	HL
	RLD	HL,L01831
	CP	(HL)
	POP	HL
	JR	C,L011BD
L011B9:	LD	A,0FFH
	JR	L011BE
;
L011BD:	INC	A
L011BE:	LD	(DE),A
L011BF:	INC	DE
	LD	C,00H
	LD	B,08H
	RCALL	L011D4
	LD	A,(HL)
	CP	'.'
	JR	NZ,L011D2
	INC	HL
	LD	B,03H
	RCALL	L011DB
L011D2:	LD	A,C
	RET
;
L011D4:	RCALL	SYN_CHK
	JR	C,L011FB
	JR	Z,L011FB
L011DB:	RCALL	SYN_CHK
	JR	Z,L01201
	JR	C,L01201
	INC	HL
	INC	B
	DEC	B
	JR	Z,L011DB
	CP	'*'
	JR	Z,L011F4
	LD	(DE),A
	INC	DE
	DEC	B
	CP	'?'
	JR	Z,L011F7
	JR	L011DB
;
L011F4:	RCALL	L0120A
L011F7:	LD	C,01H
	JR	L011DB
;
L011FB:	LD	A,E
	ADD	A,B
	LD	E,A
	RET	NC
	INC	D
	RET
;
L01201:	INC	B
	DEC	B
	RET	Z
	LD	A,' '
	JR	XFILL
;
FILL11:
	LD	B,11

L0120A:
	LD	A,'?'

XFILL:
;
; Llena (B) lugares a partir de (DE) con
; (Acc).
;
	LD	(DE),A
	INC	DE
	DJNZ	XFILL
	RET


SP_FILL:
;
; Llena con SP (C) en (HL).

	LD	(HL),' '
	INC	HL
	DEC	C
	JR	NZ,SP_FILL
	RET

;-------------------------------
PROMP:	LD	E,A
	RLD	A,(BAT_FL)
	OR	A
	JR	Z,PROMP1
	LD	A,(ECHO_FL)
	OR	A
	RJP	Z,PROMP2
PROMP1:	LD	A,E
	ADD	A,'A'
	RCALL	DSP_BYT
	RJP	PROM1
;----------------------------------


	SUBTTL	Scan Switchs.
	PAGE

	.COMMENT%

Busca switchs

 ENTRAR CON :

 (HL)=TEXTO


 SALE CON :

 (HL)=1er. Caracter no espacio despues
      del sw.

 (Acc)= 76543210
        |||||||+-- 1= /W
        ||||||+--- 1= /P
        |||||+---- 1= /V
        ||||+----- 1= /A
        |||+------ 1= /B
        |||
        +++------- No utilizados.

	%

SCAN_SW:
	LD	C,00H
L0121A:	RCALL	SKIP_SP
	RCALL	CHCK_2
	JR	NZ,L01226
	INC	HL
	RCALL	SKIP_SP
L01226:	CP	2FH
	JR	NZ,L0124A
	INC	HL
	RCALL	SYN_CHK
	JR	Z,L0124A
	JR	C,L0124A
	INC	HL
	PUSH	HL
	RLD	HL,SW_TBL
	LD	B,10H
L01239:	CP	(HL)
	JR	Z,L01244
	INC	HL
	SRL	B
	JR	NC,L01239
	POP	HL
	JR	L0121A
;
L01244:	LD	A,B
	OR	C
	LD	C,A
	POP	HL
	JR	L0121A
;
L0124A:	LD	A,C
	RET
;
SW_TBL:
	DB	'BAVPW'



L01251:	LD	C,09H
	CALL	BDOS
	RLD	DE,L017D1
	LD	A,0CH
	LD	(DE),A
	LD	C,0AH
	CALL	BDOS
	RCALL	DSP_LF
	RLD	HL,L017D3
GTNUM_?:
	RCALL	SKIP_SP
	CP	0DH
	RET	Z
RD_NUM:	RCALL	L01286
	RET	C
	LD	C,A
	RCALL	L01286
L01275:	JR	C,L01282
	PUSH	AF
	LD	A,C
	ADD	A,A
	ADD	A,A
	ADD	A,C
	ADD	A,A
	LD	C,A
	POP	AF
	ADD	A,C
	INC	C
	RET
;
L01282:	OR	01H
	LD	A,C
	RET
;
L01286:	LD	A,(HL)
	SUB	30H
	RET	C
	CP	0AH
	CCF
	RET	C
	INC	HL
	RET
;
SKIP_SP:
	LD	A,(HL)
	INC	HL
	RCALL	CHCK_SP
	JR	Z,SKIP_SP
	DEC	HL
	RET
;
SYN_CHK:
	LD	A,(HL)
	CP	61H
	JR	C,CHCK_1
	CP	7BH
	JR	NC,CHCK_1
	SUB	20H
CHCK_1:	CP	':'
	RET	Z
	CP	'.'
	RET	Z
	CP	'"'
	RET	Z
	CP	'['
	RET	Z
	CP	']'
	RET	Z
	CP	'_'
	RET	Z
	CP	'/'
	RET	Z
	CP	'+'
	RET	Z

CHCK_2:	CP	'='
	RET	Z
	CP	';'
	RET	Z
	CP	','
	RET	Z
CHCK_SP:
	CP	09H
	RET	Z
	CP	' '
	RET
;
CK_DRV:	LD	A,(FCB_1)
	INC	A
	RET	NZ
	POP	DE
	RLD	DE,MSG03
	RJP	ERR_REENT
;
L012D7:	LD	HL,FCB_1+1
	RCALL	L012F3
	DEC	A
	RET	NZ
	LD	C,12H
L012E1:	PUSH	BC
	RLD	DE,FCB_3
	LD	C,1AH
	CALL	BDOS
	POP	BC
	LD	DE,FCB_1
	CALL	BDOS
	OR	A
	RET
;
L012F3:	LD	B,0BH
L012F5:	LD	A,3FH
	CP	(HL)
	INC	HL
	LD	A,01H
	RET	Z
	DJNZ	L012F5
	DEC	A
	RET
;
L01300:	PUSH	DE
	LD	DE,0064H
	LD	C,L
	LD	B,H
	RCALL	L013C6
	LD	E,L
	LD	D,C
	POP	BC
	LD	A,(0F30EH)
	CP	01H
	JR	NC,L01335
	PUSH	DE
	LD	D,B
	LD	E,C
	POP	BC
	RCALL	L01384
	RCALL	L01348
	PUSH	HL
	RLD	DE,L017D5
	RLD	HL,L017D6
	LD	BC,0008H
	LDIR
	LD	A,2DH
	RLD	(L017DA),A
	LD	A,0DH
	RLD	(L017DD),A
	POP	HL
	RET
;
L01335:	JR	Z,L0133A
	LD	A,B
	LD	B,C
	LD	C,A
L0133A:	RCALL	L01384
	RLD	HL,(L017DC)
	RLD	(L017DB),HL
	LD	A,0DH
	RLD	(L017DD),A
L01348:	LD	A,0AH
	RLD	(L017D2),A
	LD	A,2DH
	JR	L0137A
;
L01351:	LD	A,H
	CP	0CH
	LD	A,61H
	JR	C,L0135A
	LD	A,70H
L0135A:	RLD	(L017DE),A
	LD	A,H
	CP	0DH
	JR	NC,L01367
	OR	A
	JR	NZ,L01369
	ADD	A,18H
L01367:	SUB	0CH
L01369:	LD	C,L
	LD	B,A
	RCALL	L01384
	LD	A,2EH
	RLD	(L017DB),A
	LD	A,09H
	RLD	(L017D2),A
	LD	A,3AH
L0137A:	RLD	(L017D5),A
	RLD	(L017D8),A
	RLD	HL,L017D3
	RET
;
L01384:	RLD	HL,L017D3
	LD	A,B
	RCALL	L013A1
	LD	A,C
	RCALL	L013A1
	LD	A,D
	RCALL	L013A1
	LD	A,E
	RCALL	L013A1
	LD	A,30H
	RLD	HL,L017D3
	CP	(HL)
	RET	NZ
	LD	(HL),20H
	RET
;
L013A1:	LD	B,2FH
L013A3:	INC	B
	SUB	0AH
	JR	NC,L013A3
	ADD	A,3AH
	LD	(HL),B
	INC	HL
	LD	(HL),A
	INC	HL
	INC	HL
	RET
;
L013B0:	LD	HL,0000H
	LD	A,B
	LD	B,11H
	JR	L013BF
;
L013B8:	JR	NC,L013BB
	ADD	HL,DE
L013BB:	RR	H
	RR	L
L013BF:	RRA
	RR	C
	DJNZ	L013B8
	LD	B,A
	RET
;
L013C6:	LD	HL,0000H
	LD	A,B
	LD	B,10H
	RL	C
	RLA
L013CF:	RL	L
	RL	H
	JR	C,L013E2
	SBC	HL,DE
	JR	NC,L013DA
	ADD	HL,DE
L013DA:	CCF
L013DB:	RL	C
	RLA
	DJNZ	L013CF
	LD	B,A
	RET
;
L013E2:	OR	A
	SBC	HL,DE
	JR	L013DB
;
L013E7:	LD	C,09H
	CALL	BDOS
	LD	C,08H
	CALL	BDOS
	RJP	DSP_CR
;
DSP_FLN:
	RLD	HL,FCB_3+1
	LD	B,08H
	RCALL	L01401
	RCALL	DSP_SP
	LD	B,03H
L01401:	LD	A,(HL)
	INC	HL
	RCALL	DSP_BYT
	DJNZ	L01401
L01408:	RET
;
L01409:	RLD	A,(DIR1)
	LD	L,A
	LD	H,00H
	LD	DE,0000H
	RCALL	L01426
	RLD	DE,MSG07
	LD	C,09H
	CALL	BDOS
	RLD	A,(DIR1)
	DEC	A
	RET	Z
	LD	A,73H
	JR	DSP_BYT
;
L01426:	LD	BC,0000H
	RLD	(L01836),BC
	RLD	(L01838),BC
	LD	C,20H
L01433:	ADD	HL,HL
	RL	E
	RL	D
	PUSH	HL
	RLD	HL,L01836
L0143C:	LD	B,04H
L0143E:	LD	A,(HL)
	ADC	A,A
	DAA
	LD	(HL),A
	INC	HL
	DJNZ	L0143E
	POP	HL
	DEC	C
	JR	NZ,L01433
	LD	BC,0410H
	RLD	HL,L01839
L0144F:	LD	A,(HL)
	RRA
	RRA
	RRA
L01453:	RRA
	RCALL	L01465
	LD	A,01H
	SUB	B
	JR	NZ,L0145D
	LD	C,A
L0145D:	LD	A,(HL)
	DEC	HL
	RCALL	L01465
	DJNZ	L0144F
	RET
;
L01465:	AND	0FH
	JR	Z,L0146B
	LD	C,00H
L0146B:	OR	30H
	SUB	C
	JR	DSP_BYT
;
DSP_CR:	LD	A,CR
	RCALL	DSP_BYT

DSP_LF:	LD	A,LF
	JR	DSP_BYT
;
DSP_SP:	LD	A,' '
DSP_BYT:
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	E,A
	LD	C,02H
	CALL	BDOS
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	RET
;
L0148A:	LD	A,(DE)
	INC	DE
	OR	A
	RET	Z
	PUSH	DE
	LD	E,A
	LD	C,06H
	CALL	BDOS
	POP	DE
	JR	L0148A

CMD_MSG:
	DB	'DIR     '
	RDW	DIR_CMD
	DB	'COPY    '
	RDW	COPY_CMD
	DB	'TYPE    '
	RDW	TYPE_CMD
	DB	'REN     '
	RDW	REN_CMD
	DB	'DEL     '
	RDW	DEL_CMD
	DB	'DATE    '
	RDW	DATE_CMD
	DB	'TIME    '
	RDW	TIME_CMD
	DB	'RENAME  '
	RDW	RENAME_CMD
	DB	'ERASE   '
	RDW	ERASE_CMD
	DB	'PAUSE   '
	RDW	PAUSE_CMD
	DB	'REM     '
	RDW	REM_CMD
	DB	'VERIFY  '
	RDW	VERIFY_CMD
	DB	'MODE    '
	RDW	MODE_CMD
	DB	'BASIC   '
	RDW	BASIC_CMD
	DB	'FORMAT  '
	RDW	FORMAT_CMD
	DB	'CLS     '
	RDW	CLS_CMD
	DB	'VER     '
	RDW	VER_CMD
	DB	'BEEP    '
	RDW	BEEP_CMD  
	DB	'ECHO    '
	RDW	ECHO_CMD
	DB	'COLOR   '
	RDW	COLOR_CMD
	DB	'INPUT   '
	RDW	INPUT_CMD
	DB	'IF      '
	RDW	IF_CMD
	DB	'WAIT    '
	RDW	WAIT_CMD


	SUBTTL	Mensajes.
	PAGE

MSG01:	DB	CR,LF
	DB	'Inserte disco con archivo BATCH'
	DB	CR,LF
	DB	'y toque una tecla para continuar ..','$'
MSG02:	DB	'Cualquier tecla continua ..','$'
MSG03:	DB	'Drive invalido','$'
MSG04:	DB	'Comando o archivo invalido','$'
MSG05:	DB	'Programa muy largo','$'
MSG06:	DB	'  <DIR> ','$'
MSG07:	DB	' archivo','$'
MSG08:	DB	' bytes libres','$'
MSG09:	DB	'Archivo(s) no existe(n)','$'
MSG10:	DB	'Esta seguro (S/N)? ','$'
MSG11:	DB	'Error de renombre','$'
MSG12:	DB	'Parametro invalido','$'
MSG13:	DB	'Archivo no puede ser',10,13
	DB	'copiado sobre si mismo','$'
MSG14:	DB	'Contenido de destino perdido',CR,LF
	DB	'antes de copiarlo',CR,LF,'$'
MSG15:	DB	'Error creando archivo','$'
MSG16:	DB	'Error de escritura','$'
MSG17:	DB	'Espacio insuficiente en disco','$'
MSG18:	DB	' copiado(s)','$'
MSG19:	DB	'La fecha actual es: ','$'
MSG20:	DB	'Fecha invalida','$'
MSG21:	DB	CR,LF
	DB	'Introduzca nueva fecha: ','$'
MSG22:	DB	'La hora actual es: ','$'
MSG23:	DB	'Hora invalida','$'
MSG24:	DB	CR,LF
	DB	'Introduzca nueva hora: ','$'
MSG_DAY:DB	'DomLunMarMieJueVieSab'
MSG_COM:DB	'COM'
MSG_BAT:DB	'BAT'
MSG_VER:DB	'MSX DOS Version. 1.20 (C) Microsoft'
	DB	LF,CR,'BIOS Compatible CP/M 2.2 y posterior'
	DB	LF,CR,'$'
MSG_FOR:DB	LF,'Formatea otro disco (S/N)? ','$'
MSG26:	DB	1BH,'y5',0
MSG28:	DB	1BH,'x5',0
MSG29:	DB	1BH,'A',0
INP_UT:	DB	0

	SUBTTL	Work area.
	PAGE

	DB	0
BUFFER:
	DB	80H
	DB	0
	DS	80H
BUFEND:
L017D0:	DB	CR
L017D1:	DB	0CH
L017D2:	DB	0
L017D3:	DW	0
L017D5:	DB	0
L017D6:	DW	0
L017D8:	DW	0
L017DA:	DB	0
L017DB:	DB	0
L017DC:	DB	0
L017DD:	DB	0
L017DE:	DW	0D00H
L017E0:	DW	0

SW_MSK1:DB	0
SW_MSK2:DB	0
SW_MSK3:DB	0

LINE:	DS	25H	;FCB LOW

FCB_3:	DS	25H	;   "
L0182F:	DB	0
DFL_DRV:DB	0
L01831:	DB	0
DIR1:	DB	0
DIR2:	DB	0
DIR3:	DB	0
DIR4:	DB	0
L01836:	DW	0
L01838:	DB	0
L01839:	DB	0
L0183A:	DW	0
L0183C:	DW	0
L0183E:	DB	0
L0183F:	DS	0BH	
L0184A:	DW	0
L0184C:	DW	0
L0184E:	DB	0
L0184F:	DB	0
L01850:	DB	0
L01851:	DB	0
L01852:	DB	0
L01853:	DB	0
L01854:	DB	0

	NEXT
	NEXT
DOS:
	END	L00100
