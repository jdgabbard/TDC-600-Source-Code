; Diskdriver Talent TDC600 (external floppydisk controller)
; FDC	WD37C65

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by Talent and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders


LANG	EQU	0			; 0 = orginal, 1 = english
MYSIZE	EQU	25
SECLEN  EQU     512


; FDC Controller has the following registers for the host
;
; Main Status Register  A0=0+RD
; Data Register         A0=1+RD
; Data Register         A0=1+WR
; Operations Register   LDOR+WR
; Control Register      LDCR+WR

; -LDCR looks like it is connected to local high, so no way to change Control Register
; -CS combi of SLOTSEL,A14=0,A13=0,A12=0
; A0 = A0
; -LDOR combi of SLOTSEL,A14=0,A13=0,A12=1
; combination of SLOTSEL,A14=0,A13=1,A12=0 could be used for future expansion
; combination of SLOTSEL,A14=0,A13=1,A12=1 could be used for future expansion

D.0000	EQU	0000H	; Main Status Register
D.0001	EQU	0001H	; Data Register
D.1000	EQU	1000H	; Operations Register
D.8000	EQU	D.0000+8000H
D.8001	EQU	D.0001+8000H
D.9000	EQU	D.1000+8000H

BASENT	EQU	4022H
D.FFFF	EQU	0FFFFH


; driver workarea
; +0    motor off timer
; +1    disk change drive 0 timer
; +2    disk change drive 1 timer
; +3    last physical drive
; +4    last phantom drive
; +5    number of physical drives
; +6,5  WD37C65 cmd
; +11   ??
; +12   fdc operation mode
; +13   media descriptor (DKSFMT)
; +14   WD37C65 status ST1
; +15   WD37C65 status ST2
; +16   WD37C65 status ST3
; +17   WD37C65 status C
; +18   WD37C65 status H
; +19   WD37C65 status R
; +20   WD37C65 status N
; +21   ??
; +22   slotid page 2
; +23   slotid disk controller
; +24   slotid page 0


;	  Subroutine Get current slotid on page
;	     Inputs  B = page
;	     Outputs ________________________

C.7405:	PUSH	BC
        PUSH	DE
        LD	A,B
        OR	A			; page 0 ?
        IN	A,(0A8H)
        JR	Z,J$7413
        PUSH	BC
J$740E:	RRCA
        RRCA
        DJNZ	J$740E
        POP	BC
J$7413:	AND	03H			; primary slot
        LD	E,A
        LD	D,00H
        LD	HL,EXPTBL
        ADD	HL,DE
        LD	E,A
        LD	A,(HL)
        AND	80H
        OR	E
        LD	E,A
        INC	HL
        INC	HL
        INC	HL
        INC	HL
        LD	A,B
        OR	A			; page 0 ?
        LD	A,(HL)
        RLCA
        RLCA
        JR	Z,J$7431
J$742D:	RRCA
        RRCA
        DJNZ	J$742D
J$7431:	AND	0CH
        OR	E
        POP	DE
        POP	BC
        RET

;	  Subroutine Set slotid on page 0
;	     Inputs  B = slotid
;	     Outputs ________________________

C.7437:	DI
        PUSH	BC
        LD	B,A
        AND	03H
        LD	C,A
        LD	A,B
        BIT	7,A
        JR	NZ,J$744B
        IN	A,(0A8H)
        AND	0FCH
        OR	C
        OUT	(0A8H),A
        POP	BC
        RET

J$744B:	PUSH	DE
        IN	A,(0A8H)
        AND	0FCH
        OR	C
        LD	D,A
        RRCA
        RRCA
        AND	0C0H
        LD	E,A
        LD	A,D
        AND	3FH
        OR	E
        OUT	(0A8H),A
        LD	A,B
        AND	0CH
        RRCA
        RRCA
        LD	C,A
        LD	A,(D.FFFF)
        CPL
        AND	0FCH
        OR	C
        LD	(D.FFFF),A
        LD	A,D
        OUT	(0A8H),A
        POP	DE
        POP	BC
        RET

;	  Subroutine Enable FDC on page 0
;	     Inputs  ________________________
;	     Outputs ________________________

C.7473:	PUSH	AF
        PUSH	BC
        PUSH	DE
        PUSH	HL
        CALL	GETWRK
        LD	B,0			; page 0
        CALL	C.7405			; Get current slotid on page
        LD	(IX+24),A
        LD	B,1			; page 1
        CALL	C.7405			; Get current slotid on page
        LD	(IX+23),A               ; save slotid disk controller
        LD	B,2			; page 2
        CALL	C.7405			; Get current slotid on page
        LD	(IX+22),A
        DI
        LD	A,(IX+23)               ; slotid disk controller
        CALL	C.7437			; Set slotid on page 0
        POP	HL
        POP	DE
        POP	BC
        POP	AF
        RET

I$749E:
        DEFB	0F8h			; Media F8
        DEFW	512			; 80 Tracks
        DEFB	0Fh			; 9 sectors
        DEFB	04h			; 1 side
        DEFB	01h			; 3.5" 360 Kb
        DEFB	02h
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	12
        DEFW	355
        DEFB	2
        DEFW	5

DEFDPB  EQU     $-1

	DEFB	0F9h			; Media F9
        DEFW	512			; 80 Tracks
        DEFB	0Fh			; 9 sectors
        DEFB	04h			; 2 sides
        DEFB	01h			; 3.5" 720 Kb
        DEFB	02h
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	14
        DEFW	714
        DEFB	3
        DEFW	7

        DEFB	0FAh			; Media FA
        DEFW	512			; 80 Tracks
        DEFB	0Fh			; 8 sectors
        DEFB	04h			; 1 side
        DEFB	01h			; 3.5" 320 Kb
        DEFB	02h
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	10
        DEFW	316
        DEFB	1
        DEFW	3

        DEFB	0FBh			; Media FB
        DEFW	512			; 80 Tracks
        DEFB	0Fh			; 8 sectors
        DEFB	04h			; 2 sides
        DEFB	01h			; 3.5" 640 Kb
        DEFB	02h
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	12
        DEFW	635
        DEFB	2
        DEFW	5

        DEFB	0FCh		        ; Media FC
        DEFW	512		        ; 40 Tracks
        DEFB	0Fh		        ; 9 sectors
        DEFB	04h		        ; 1 side
        DEFB	00h		        ; 5.25" 180 Kb
        DEFB	01h
        DEFW	1
        DEFB	2
        DEFB	64
        DEFW	9
        DEFW	352
        DEFB	2
        DEFW	5

        DEFB	0FDh		        ; Media FD
        DEFW	512		        ; 40 Tracks
        DEFB	0Fh		        ; 9 sectors
        DEFB	04h		        ; 2 sides
        DEFB	01h		        ; 5.25" 360 Kb
        DEFB	02h
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	12
        DEFW	355
        DEFB	2
        DEFW	5

        DEFB	0FEh		        ; Media FE
        DEFW	512		        ; 40 Tracks
        DEFB	0Fh		        ; 8 sectors
        DEFB	04h		        ; 1 side
        DEFB	00h		        ; 5.25" 160 Kb
        DEFB	01h
        DEFW	1
        DEFB	2
        DEFB	64
        DEFW	7
        DEFW	314
        DEFB	1
        DEFW	3

        DEFB	0FFh		        ; Media FF
        DEFW	512		        ; 40 Tracks
        DEFB	0Fh		        ; 8 sectors
        DEFB	04h		        ; 2 sides
        DEFB	01h		        ; 5.25" 320 Kb
        DEFB	02h
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	10
        DEFW	316
        DEFB	1
        DEFW	3


;	  Subroutine DSKIO
;	     Inputs  ________________________
;	     Outputs ________________________

DSKIO:
C.752E:	JP	NC,J$761F

; dskio write

        CALL	DISINT
        DI
        CALL	C.7473			; Enable FDC on page 0
        CALL	C$7563                  ; write sectors

; dskio finish

J.753B:	PUSH	AF
        LD	C,2*50                  ; assume disk unchanged for 2 seconds
        JR	NC,J$7542               ; no error,
        LD	C,0                     ; error, disk unchanged for 0 seconds
J$7542:	CALL	C.781E                  ; force FDC ready
        LD	(IX+0),4*50             ; motor off timer = 4 seconds
        LD	A,(IX+12)
        AND	A                       ; drive 0 ?
        JR	NZ,J$7554               ; nope,
        LD	(IX+1),C                ; set drive 0 disk change timer
        JR	J$7557

J$7554:	LD	(IX+2),C                ; set drive 1 disk change timer
J$7557:	LD	A,(IX+24)		; saved slotid on page 0
        CALL	C.7437			; Set slotid on page 0
        POP	AF
        EI
        CALL	ENAINT
        RET

;	  Subroutine write sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C$7563:	CALL	C.76E4                  ; setup for disk operation
        RET	C                       ; error, quit
        LD	A,H
        AND	A                       ; transfer to page 2 or 3 ?
        JP	M,J.759E                ; yep, do direct transfer
        CALL	C.79F0                  ; install and relocate dskio routine in $SECBUF
        CALL	C.7A48                  ; execute dskio routine in $SECBUF
        RET	C                       ; error, quit
        INC	B
        DEC	B                       ; sectors left ?
        RET	Z                       ; nope, quit
        LD	A,H
        AND	A                       ; transfer to page 2 or 3 ?
        JP	M,J.759E                ; yep, do direct transfer
        PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	A,(IX+24)		; saved slotid on page 0
        CALL	C.7437			; Set slotid on page 0
        LD	DE,($SECBUF)
        PUSH	DE
        LD	BC,SECLEN
        CALL	XFER
        LD	A,(IX+23)               ; slotid disk controller
        CALL	C.7437			; Set slotid on page 0
        POP	HL
        POP	BC
        POP	DE
        CALL	C.75A9                  ; write sector
        POP	HL
        JR	J$75A1

J.759E:	CALL	C.75A9                  ; write sector
J$75A1:	RET	C                       ; error, quit
        DEC	B                       ; update number of sectors
        RET	Z                       ; all done, quit
        CALL	C.77A0                  ; setup for next sector
        JR	J.759E

;	  Subroutine write sector
;	     Inputs  ________________________
;	     Outputs ________________________

C.75A9:	LD	E,7
J$75AB:	CALL	C.781E                  ; force FDC ready
        PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	BC,0
        LD	DE,0
        LD	A,45H                   ; WRITE DATA
        CALL	C.783C                  ; write sector command to FDC
J.75BC:	LD	A,(DE)
        RLA                             ; RQM ?
        JR	C,J.75D0                ; yep,
        DJNZ	J.75BC                  ; try again
        DEC	C
        LD	A,(DE)
        RLA                             ; RQM ?
        JR	C,J.75D0                ; yep,
        JR	NZ,J.75BC               ; try again
        SCF
        JR	J$75DE                  ; quit with write protect error

J.75CC:	LD	A,(DE)
        RLA                             ; RQM ?
        JR	NC,J.75CC               ; nope, wait
J.75D0:	AND	40H                     ; DIO ?
        JR	Z,J$75DB                ; nope, end of sector transfer
        INC	E
        LD	A,(HL)
        LD	(DE),A                  ; write sector data to FDC
        DEC	E
        INC	HL
        JR	J.75CC                  ; next byte

J$75DB:	CALL	C.786A                  ; read result bytes from FDC
J$75DE:	POP	BC
        POP	DE
        POP	HL
        JP	C,J$7618                ; error, quit with not ready error
        LD	A,(IX+15)
        AND	7FH                     ; ignore end of cylinder
        RET	Z                       ; no errors, quit
        BIT	1,A                     ; FDD has set WP ?
        JR	NZ,J$761C               ; yep, quit return write protect error
        PUSH	AF
        LD	A,(IX+6)
        AND	01H                     ; drive
        INC	A
        CPL
        AND	(IX+11)
        LD	(IX+11),A               ; 
        CALL	C.77E2                  ; seek to track
        POP	AF
        DEC	E                       ; update number of tries
        JP	NZ,J$75AB               ; try again
        SCF
        LD	E,A
        BIT	4,E                     ; overrun ?
        LD	A,10
        RET	NZ                      ; yep, quit with write fault error
        BIT	2,E                     ; no data ?
        LD	A,8
        RET	NZ                      ; yep, quit with record not found error
        BIT	5,E                     ; data error ?
        LD	A,4
        RET	NZ                      ; yep, quit with data (crc) error
        LD	A,12                    ; quit with other error
        RET

J$7618:	LD	A,2
        SCF
        RET                             ; quit with not ready error

J$761C:	XOR	A
        SCF
        RET                             ; quit with write protect error


; dskio read

J$761F:	CALL	DISINT
        DI
        CALL	C.7473			; Enable FDC on page 0
        CALL	C$762C                  ; read sectors
        JP	J.753B                  ; dskio finish

;	  Subroutine read sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C$762C:	CALL	C.76E4                  ; setup for disk operation
        RET	C                       ; error, quit
        LD	A,H
        AND	A                       ; transfer to page 2 or 3 ?
        JP	M,J.766F                ; yep, do direct transfer
        CALL	C.79F0                  ; install and relocate dskio routine in $SECBUF
        CALL	C$7A23                  ; modify dskio routine in $SECBUF for read operation
        CALL	C.7A48                  ; execute dskio routine in $SECBUF
        RET	C                       ; error, quit
        INC	B
        DEC	B                       ; sectors left ?
        RET	Z                       ; nope, quit
        LD	A,H
        AND	A                       ; transfer to page 2 or 3 ?
        JP	M,J.766F                ; yep, do direct transfer
        PUSH	HL
        LD	HL,($SECBUF)
        CALL	C.767A                  ; read sector
        POP	HL
        RET	C                       ; error, quit
        PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	A,(IX+24)		; saved slotid on page 0
        CALL	C.7437			; Set slotid on page 0
        EX	DE,HL
        LD	HL,($SECBUF)
        LD	BC,512
        CALL	XFER
        LD	A,(IX+23)               ; slotid disk controller
        CALL	C.7437			; Set slotid on page 0
        POP	HL
        POP	DE
        POP	BC
        AND	A
        JR	J$7673

J.766F:	CALL	C.767A                  ; read sector
        RET	C                       ; error, quit
J$7673:	DEC	B                       ; update number of sectors
        RET	Z                       ; all done, quit
        CALL	C.77A0                  ; setup for next sector
        JR	J.766F

;	  Subroutine read sector
;	     Inputs  ________________________
;	     Outputs ________________________

C.767A:	LD	E,7
J$767C:	CALL	C.781E                  ; force FDC ready
        PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	BC,0
        LD	DE,0
        LD	A,66H                   ; READ DATA
        CALL	C.783C                  ; write sector command to FDC
J.768D:	LD	A,(DE)
        RLA                             ; RQM ?
        JR	C,J.76A1                ; yep, go
        DJNZ	J.768D                  ; try again
        DEC	C
        LD	A,(DE)
        RLA                             ; RQM ?
        JR	C,J.76A1                ; yep, go
        JR	NZ,J.768D               ; try again
        SCF
        JR	J$76AF                  ; quit

J.769D:	LD	A,(DE)
        RLA                             ; RQM ?
        JR	NC,J.769D               ; nope, wait
J.76A1:	AND	40H                     ; DIO ?
        JR	Z,J$76AC                ; nope, end of sector transfer
        INC	E
        LD	A,(DE)                  ; read sector data from FDC
        LD	(HL),A                  ; transfer
        INC	HL
        DEC	E
        JR	J.769D                  ; next byte

J$76AC:	CALL	C.786A                  ; read result bytes from FDC
J$76AF:	POP	BC
        POP	DE
        POP	HL
        JP	C,J$76E0                ; error, quit with not ready error
        LD	A,(IX+15)
        AND	7FH                     ; ignore end of track
        RET	Z                       ; no error, quit
        PUSH	AF
        LD	A,(IX+6)
        AND	01H                     ; drive
        INC	A
        CPL
        AND	(IX+11)
        LD	(IX+11),A               ; 
        CALL	C.77E2                  ; seek to track
        POP	AF
        DEC	E                       ; update number of tries
        JP	NZ,J$767C               ; next try
        SCF
        LD	E,A
        BIT	2,E                     ; no data ?
        LD	A,8
        RET	NZ                      ; yep, quit with record not found error
        BIT	5,E                     ; data error ?
        LD	A,4
        RET	NZ                      ; yep, quit with data (crc) error
        LD	A,12
        RET                             ; quit with other error

J$76E0:	LD	A,2
        SCF
        RET                             ; quit with not ready error

;	  Subroutine setup for disk operation
;	     Inputs  ________________________
;	     Outputs ________________________

C.76E4:	PUSH	AF
        PUSH	BC
        PUSH	HL
        CALL	GETWRK
        POP	HL
        POP	BC
        POP	AF
        CP	1+1
        JR	C,J$76F5
J$76F1:	LD	A,12
        SCF
        RET

J$76F5:	PUSH	AF
        LD	A,C
        CP	0F8H
        JR	NC,J$76FE
        POP	AF
        JR	J$76F1

J$76FE:	EX	(SP),HL
        PUSH	HL
        PUSH	BC
        BIT	1,C
        LD	C,E
        LD	B,D
        LD	DE,8
        JR	NZ,J$770B
        INC	DE
J$770B:	CALL	DIV16
        LD	A,L
        INC	A
        LD	(IX+9),A                ; record
        LD	L,C
        POP	BC
        POP	AF
        LD	H,A
        LD	A,(IX+5)
        DEC	A                       ; 1 physical drive ?
        JR	Z,J.7723                ; yep,
        LD	A,H
        OR	A                       ; drive 0 ?
        JR	Z,J.7723                ; yep, AT mode, motor 0 on, DMA, no reset, drive 0
        LD	A,2DH-1CH               ; nope, AT mode, motor 1 on, DMA, no reset, drive 1
J.7723:	ADD	A,1CH
        PUSH	AF                      ; store FDC operation mode
        AND	01H                     ; drive
        BIT	0,C
        JR	Z,J.7732
        SRL	L
        JR	NC,J.7732
        OR	04H                     ; side 1
J.7732:	LD	(IX+6),A
        PUSH	AF
        SRL	A
        SRL	A
        AND	01H
        LD	(IX+8),A                ; side
        POP	AF
        LD	D,A
        LD	A,C
        RRCA
        RRCA
        AND	0C0H
        OR	D
        LD	D,A
        POP	AF                      ; restore FDC operation mode
        LD	(D.1000),A		; set FDC operation mode
        LD	(IX+12),A               ; update FDC operation mode
        LD	A,(IX+0)
        AND	A                       ; motor still on ?
        LD	(IX+0),0FFH             ; motor off timer = for ever
        JR	NZ,J$7763               ; yep, skip motor spin up wait time
        PUSH	HL
        LD	HL,0
J$775D:	DEC	HL
        LD	A,L
        OR	H
        JR	NZ,J$775D
        POP	HL
J$7763:	LD	C,L
        LD	(IX+7),L                ; cylinder
        LD	A,(IX+5)
        DEC	A                       ; 1 physical drive ?
        JR	Z,J$777A                ; yep,
        LD	A,(IX+3)
        CP	H
        JR	Z,J.779B
        XOR	01H
        LD	(IX+3),A
        JR	J.779B

J$777A:	LD	A,H
        CP	(IX+4)
        LD	(IX+4),A
        JR	Z,J.779B
        PUSH	IX
        PUSH	DE
        PUSH	BC
        LD	A,(IX+24)		; saved slotid on page 0
        CALL	C.7437			; Set slotid on page 0
        CALL	PROMPT
        POP	BC
        POP	DE
        POP	IX
        DI
        LD	A,(IX+23)               ; slotid disk controller
        CALL	C.7437			; Set slotid on page 0
J.779B:	CALL	C.77E2                  ; seek to track
        POP	HL
        RET

;	  Subroutine setup for next sector
;	     Inputs  ________________________
;	     Outputs ________________________

C.77A0:	INC	H
        INC	H
        LD	A,(IX+9)
        INC	A
        LD	(IX+9),A                ; next record
        BIT	7,D
        JR	NZ,J$77B0
        CP	9+1
        RET	C
J$77B0:	CP	8+1
        RET	C
        LD	A,1
        LD	(IX+9),A                ; record = 1
        BIT	6,D                     ; media double sided ?
        JR	Z,J.77CE                ; nope, next cylinder on side 0
        BIT	2,D                     ; currently side 1 ?
        JR	NZ,J.77CE               ; yep, next cylinder on side 0
        SET	2,D                     ; side 1
        LD	A,D
        AND	0FH
        LD	(IX+6),A                ; drive + side
        LD	A,1
        LD	(IX+8),A                ; side = 1
        RET

J.77CE:	RES	2,D                     ; side 0
        LD	A,D
        AND	0FH
        LD	(IX+6),A                ; drive + side
        XOR	A
        LD	(IX+8),A                ; side = 0
        INC	C
        LD	(IX+7),C                ; cylinder
        CALL	C.77E2                  ; seek to track
        RET

;	  Subroutine seek to track
;	     Inputs  ________________________
;	     Outputs ________________________

C.77E2:	CALL	C.781E                  ; force FDC ready
        LD	A,(IX+6)
        AND	01H                     ; drive
        INC	A
        AND	(IX+11)
        JR	NZ,J$780A
        LD	A,(IX+6)
        AND	01H                     ; drive
        INC	A
        OR	(IX+11)
        LD	(IX+11),A               ; 
        LD	A,07H                   ; RECALIBRATE
        CALL	C.785B                  ; write command byte to FDC
        LD	A,(IX+6)                ; drive
        CALL	C.785B                  ; write command byte to FDC
        CALL	C.788C                  ; wait for normal termination of seek/calibrate
J$780A:	LD	A,0FH                   ; SEEK
        CALL	C.785B                  ; write command byte to FDC
        LD	A,(IX+6)                ; drive
        CALL	C.785B                  ; write command byte to FDC
        LD	A,(IX+7)                ; cylinder
        CALL	C.785B                  ; write command byte to FDC
        JP	C.788C                  ; wait for normal termination of seek/calibrate

;	  Subroutine force FDC ready
;	     Inputs  ________________________
;	     Outputs ________________________

C.781E:	LD	A,(D.0000)
        AND	0D0H			; RQM,DIO,CB
        XOR	80H                     ; RQM = 1, DIO = 0, CB = 0 ?
        RET	Z                       ; yep, quit
        XOR	A
        LD	(IX+11),A               ; 
        LD	(D.1000),A		; PC AT mode, motor 2 off, motor 1 off, dma disabled, reset, select drive 0
        CALL	C.7837                  ; wait
        LD	A,(IX+12)
        LD	(D.1000),A              ; set FDC operation mode
        RET

;	  Subroutine wait
;	     Inputs  ________________________
;	     Outputs ________________________

C.7837:	EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        RET

;	  Subroutine write sector command to FDC
;	     Inputs  ________________________
;	     Outputs ________________________

C.783C:	PUSH	BC
        LD	B,6
        PUSH	IX
J$7841:	CALL	C.785B                  ; write command byte to FDC
        LD	A,(IX+6)
        INC	IX
        DJNZ	J$7841
        POP	IX
        POP	BC
        LD	A,(IX+9)                ; EOT = record (1 sector)
        CALL	C.785B                  ; write command byte to FDC
        LD	A,1BH                   ; GPL
        CALL	C.785B                  ; write command byte to FDC
        LD	A,0FFH                  ; DTL

;	  Subroutine write command byte to FDC
;	     Inputs  ________________________
;	     Outputs ________________________

C.785B:	PUSH	AF
J$785C:	LD	A,(D.0000)
        AND	0E0H			; RQM,DIO,EXM
        CP	80H			; DR ready, CPU->FDC, Execution finshed ?
        JR	NZ,J$785C		; nope, wait
        POP	AF
        LD	(D.0001),A
        RET

;	  Subroutine read result bytes from FDC
;	     Inputs  ________________________
;	     Outputs ________________________

C.786A:	PUSH	IX
J.786C:	LD	A,(D.0000)
        AND	0C0H			; RQM, DIO
        CP	0C0H
        JR	NZ,J.786C
        LD	A,(D.0001)              ; read result byte from FDC
        LD	(IX+14),A
        INC	IX
        CALL	C.7837                  ; wait
        LD	A,(D.0000)
        AND	0C0H			; RQM, DIO
        CP	80H
        JR	NZ,J.786C
        POP	IX
        RET

;	  Subroutine wait for normal termination of seek/calibrate
;	     Inputs  ________________________
;	     Outputs ________________________

C.788C:	PUSH	BC
        LD	B,20H
J$788F:	LD	A,08H                   ; SENSE INTERRUPT STATE
        CALL	C.785B                  ; write command byte to FDC
        CALL	C.786A                  ; read result bytes from FDC
        LD	A,(IX+14)
        AND	0F0H
        CP	20H                     ; normal termination of seek or calibrate ?
        JR	Z,J$78A9                ; yep, quit
        CALL	C.7837                  ; wait
        DEC	BC
        LD	A,B
        OR	C
        JR	NZ,J$788F
        SCF
J$78A9:	POP	BC
        RET

;	  Subroutine INIHRD
;	     Inputs  ________________________
;	     Outputs ________________________

INIHRD:
        LD	B,0			; page 0
        CALL	C.7405			; Get current slotid on page
        PUSH	AF
        LD	B,1			; page 1
        CALL	C.7405			; Get current slotid on page
        CALL	C.7437			; Set slotid on page 0
        XOR	A
        LD	(D.1000),A		; PC AT mode, motor 2 off, motor 1 off, dma disabled, reset, select drive 1
        CALL	C.7837                  ; wait
        LD	A,0CH
        LD	(D.1000),A		; PC AT mode, motor 2 off, motor 1 off, dma enabled, select drive 1
        LD	A,03H                   ; SPECIFY
        CALL	C.785B                  ; write command byte to FDC
        LD	A,9FH
        CALL	C.785B                  ; write command byte to FDC
        LD	A,03H
        CALL	C.785B                  ; write command byte to FDC
        LD	A,1CH
        LD	(D.1000),A		; PC AT mode, motor 2 off, motor 1 on, dma enabled, select drive 1
        LD	A,07H                   ; RECALIBRATE
        CALL	C.785B                  ; write command byte to FDC
        LD	A,0                     ; drive 0
        CALL	C.785B                  ; write command byte to FDC
        LD	HL,0
J$78E6:	CALL	C.7837                  ; wait
        DEC	HL
        LD	A,H
        OR	L
        JR	NZ,J$78E6
        LD	A,0CH
        LD	(D.1000),A		; PC AT mode, motor 2 off, motor 1 off, dma enabled, select drive 0
        POP	AF
        CALL	C.7437			; Set slotid on page 0
        RET

;	  Subroutine MTOFF
;	     Inputs  ________________________
;	     Outputs ________________________

MTOFF:
        PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	A,0CH			; PC AT mode, motor 2 off, motor 1 off, dma enabled, select drive 0
        LD	(IX+12),A               ; update operation mode
        LD	E,A
        LD	B,1			; page 1
        CALL	C.7405			; Get current slotid on page
        LD	HL,D.1000
        CALL	WRSLT                   ; set FDC operation mode
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine DRIVES
;	     Inputs  ________________________
;	     Outputs ________________________

DRIVES:
        CALL	C.7473			; Enable FDC on page 0
        PUSH	BC
        PUSH	AF
        LD	A,2DH			; PC AT mode, motor 2 on, motor 1 off, dma enabled, select drive 2
        LD	(D.1000),A
        CALL	C.788C                  ; wait for normal termination of seek/calibrate
        LD	A,07H                   ; RECALIBRATE
        CALL	C.785B                  ; write command byte to FDC
        LD	A,1                     ; drive 1
        CALL	C.785B                  ; write command byte to FDC
        CALL	C.788C                  ; wait for normal termination of seek/calibrate
        LD	L,1                     ; assume 1 physical drive
        JR	C,J$7930                ; time out, 1 drive
        LD	L,2                     ; 2 physical drives
J$7930:	LD	(IX+5),L
        LD	A,0CH			; PC AT mode, motor 2 off, motor 1 off, dma enabled, select drive 1
        LD	(D.1000),A
        POP	AF
        JR	Z,J$793D
        LD	L,2
J$793D:	PUSH	HL
        PUSH	AF
        CALL	GETWRK
        LD	A,(IX+24)		; saved slotid on page 0
        CALL	C.7437			; Set slotid on page 0
        POP	AF
        POP	HL
        POP	BC
        RET

;	  Subroutine INIENV
;	     Inputs  ________________________
;	     Outputs ________________________

INIENV:
        CALL	GETWRK
        LD	D,(IX+5)                ; store number of physical drives
        XOR	A
        LD	B,MYSIZE
J$7955:	LD	(HL),A
        INC	HL
        DJNZ	J$7955
        LD	(IX+5),D                ; restore number of physical drives
        LD	(IX+10),2               ; record size = 512
        LD	HL,I$7966
        JP	SETINT

I$7966:	PUSH	AF
        CALL	GETWRK
        LD	A,(HL)
        AND	A                       ; motor already off ?
        JR	Z,J.7986                ; yep, skip
        CP	0FFH                    ; motor off count down paused ?
        JR	Z,J.7986                ; yep, skip
        DEC	A
        LD	(HL),A                  ; count down
        JR	NZ,J.7986               ; not at the end, skip
        LD	A,0CH			; PC AT mode, motor 2 off, motor 1 off, dma enabled, select drive 1
        LD	E,A
        LD	B,1			; page 1
        CALL	C.7405			; Get current slotid on page
        PUSH	HL
        LD	HL,D.1000
        CALL	WRSLT                   ; motor off
        POP	HL
J.7986:	INC	HL
        LD	A,(HL)
        AND	A                       ; disk change counter drive 0 already finished ?
        JR	Z,J$798C                ; yep, skip
        DEC	(HL)                    ; count down
J$798C:	INC	HL
        LD	A,(HL)
        AND	A                       ; disk change counter drive 1 already finished ?
        JR	Z,J$7992                ; yep, skip
        DEC	(HL)                    ; count down
J$7992:	POP	AF
        JP	PRVINT                  ; continue with next timer interrupt handler

;	  Subroutine DSKCHG
;	     Inputs  ________________________
;	     Outputs ________________________

DSKCHG:
        EI
        PUSH	HL
        PUSH	BC
        PUSH	AF
        CALL	GETWRK
        POP	AF
        POP	BC
        POP	HL
        AND	A                       ; drive 0 ?
        LD	B,(IX+2)
        JR	NZ,J$79A9               ; nope, use disk change counter drive 1
        LD	B,(IX+1)                ; use disk change counter drive 0
J$79A9:	INC	B
        DEC	B                       ; disk change counter finished ?
        LD	B,1
        RET	NZ                      ; nope, quit with disk unchanged
        PUSH	BC
        PUSH	HL
        LD	DE,1                    ; 1st FAT sector
        LD	HL,($SECBUF)
        CALL	C.752E                  ; DSKIO
        JR	C,J.79D2                ; error, quit with error
        LD	HL,($SECBUF)
        LD	B,(HL)                  ; mediadescriptor
        POP	HL
        PUSH	BC
        CALL	C$79D5                  ; get DPB
        LD	A,12
        JR	C,J.79D2                ; error, quit with error
        POP	AF
        POP	BC
        CP	C                       ; same mediadescriptor ?
        SCF
        CCF                             ; clear Cx
        LD	B,0FFH
        RET	NZ                      ; nope, quit with disk changed
        INC	B
        RET                             ; quit with disk change unkown

J.79D2:	POP	DE
        POP	DE
        RET

;	  Subroutine GETDPB
;	     Inputs  ________________________
;	     Outputs ________________________

GETDPB:
C$79D5:	EI
        EX	DE,HL
        INC	DE
        LD	A,B
        SUB	0F8H
        RET	C
        LD	L,A
        LD	H,00H
        ADD	HL,HL
        LD	C,L
        LD	B,H
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,BC
        LD	BC,I$749E
        ADD	HL,BC
        LD	BC,18
        LDIR
        RET

;	  Subroutine install and relocate dskio routine in $SECBUF
;	     Inputs  ________________________
;	     Outputs ________________________

C.79F0:	PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	HL,I$7A84
        LD	DE,($SECBUF)
        LD	BC,S7A84
        LDIR
        LD	HL,I$7A4E
J$7A02:	LD	E,(HL)
        INC	HL
        LD	D,(HL)
        INC	HL
        LD	A,E
        OR	D
        JR	Z,J$7A1F
        PUSH	HL
        LD	HL,($SECBUF)
        ADD	HL,DE
        INC	HL
        LD	C,(HL)
        INC	HL
        LD	B,(HL)
        EX	DE,HL
        LD	HL,($SECBUF)
        ADD	HL,BC
        EX	DE,HL
        LD	(HL),D
        DEC	HL
        LD	(HL),E
        POP	HL
        JR	J$7A02

J$7A1F:	POP	BC
        POP	DE
        POP	HL
        RET

;	  Subroutine modify dskio routine in $SECBUF for read operation
;	     Inputs  ________________________
;	     Outputs ________________________

C$7A23:	PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	HL,I$7A6A
J$7A29:	LD	E,(HL)
        INC	HL
        LD	D,(HL)
        LD	A,E
        OR	D
        JR	Z,J$7A44
        PUSH	HL
        LD	HL,($SECBUF)
        ADD	HL,DE
        EX	DE,HL
        POP	HL
        INC	HL
        LD	C,(HL)
        INC	HL
        LD	B,(HL)
        INC	HL
        PUSH	HL
        EX	DE,HL
        LD	(HL),C
        INC	HL
        LD	(HL),B
        POP	HL
        JR	J$7A29

J$7A44:	POP	BC
        POP	DE
        POP	HL
        RET

;	  Subroutine execute dskio routine in $SECBUF
;	     Inputs  ________________________
;	     Outputs ________________________

C.7A48:	PUSH	HL
        LD	HL,($SECBUF)
        EX	(SP),HL
        RET

I$7A4E: DEFW    P0029
        DEFW    P002E
        DEFW    P003C
        DEFW    P005E
        DEFW    P0064
        DEFW    P0071
        DEFW    P0088
        DEFW    P011B
        DEFW    P0156
        DEFW    P016A
        DEFW    P017A
        DEFW    P017F
        DEFW    P01A6
        DEFW    0

I$7A6A: DEFW    P003A,663EH             ; LD A,66H
        DEFW    P0058,771AH             ; LD A,(DE)
                                        ; LD (HL),A
        DEFW    P0076,0                 ; NOP
                                        ; NOP
        DEFW    P0076+2,0               ; NOP
                                        ; NOP
        DEFW    P0091,0
        DEFW    P0091+2,0
        DEFW    0

I$7A84:
        .PHASE  0

	PUSH	IX
        PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	A,(IX+24)		; saved slotid on page 0
        CALL	C.7437			; Set slotid on page 0
        PUSH	IX
        LD	A,(RAMAD1)
        LD	H,HIGH 4000H
        CALL	ENASLT
        POP	IX
        LD	A,(IX+23)               ; slotid disk controller
        LD	H,HIGH 8000H
        CALL	ENASLT
        POP	BC
        POP	DE
        POP	HL
        POP	IX
J$7AA8:	DEC	HL
        LD	A,H
        ADD	A,HIGH SECLEN
        INC	HL
P0029:  JP	M,P00AF
        LD	E,7
P002E:	CALL	P0147
        PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	BC,0
        LD	DE,D.8000
P003A:  LD	A,45H                   ; WRITE DATA
P003C:  CALL	P0165
J.7AC3:	LD	A,(DE)
        RLA
        JR	C,J.7AD7
        DJNZ	J.7AC3
        DEC	C
        LD	A,(DE)
        RLA
        JR	C,J.7AD7
        JR	NZ,J.7AC3
        SCF
        JR	J$7AE5

J.7AD3:	LD	A,(DE)
        RLA
        JR	NC,J.7AD3
J.7AD7:	AND	40H
        JR	Z,P005E
        INC	E
P0058:  LD	A,(HL)
        LD	(DE),A
        DEC	E
        INC	HL
        JR	J.7AD3

P005E:  CALL	P0193
J$7AE5:	POP	BC
        POP	DE
        POP	HL
P0064:  JP	C,P00A7
        LD	A,(IX+15)
        AND	7FH
        JR	NZ,J$7AFA
        DEC	B
        JR	Z,P00AF
P0071:  CALL	P00DD
        JR	J$7AA8

P0076:
J$7AFA:	BIT	1,A
        JR	NZ,J$7B30
        PUSH	AF
        LD	A,(IX+6)
        AND	01H                     ; drive
        INC	A
        CPL
        AND	(IX+11)
        LD	(IX+11),A               ; 
P0088:  CALL	P011F
        POP	AF
        DEC	E
        JR	NZ,P002E
        SCF
        LD	E,A
P0091:  BIT	4,E
        LD	A,10
        JR	NZ,J.7B32
        BIT	2,E
        LD	A,8
        JR	NZ,J.7B32
        BIT	5,E
        LD	A,4
        JR	NZ,J.7B32
        LD	A,12
        JR	J.7B32

P00A7:	LD	A,2
        SCF
        JR	J.7B32

J$7B30:	XOR	A
        SCF
J.7B32:	SCF
P00AF:  PUSH	IX
        PUSH	HL
        PUSH	DE
        PUSH	BC
        PUSH	AF
        PUSH	IX
        LD	A,(IX+22)               ; saved slotid page 2
        LD	H,HIGH 8000H
        CALL	ENASLT
        CALL	$DOSON
        POP	IX
        PUSH	IX
        LD	A,(IX+23)               ; slotid disk controller
        LD	H,HIGH 4000H
        CALL	ENASLT
        POP	IX
        LD	A,(IX+23)               ; slotid disk controller
        CALL	C.7437			; Set slotid on page 0
        POP	AF
        POP	BC
        POP	DE
        POP	HL
        POP	IX
        RET

P00DD:	INC	H
        INC	H
        LD	A,(IX+9)
        INC	A
        LD	(IX+9),A                ; next record
        BIT	7,D
        JR	NZ,J$7B71
        CP	9+1
        RET	C
J$7B71:	CP	8+1
        RET	C
        LD	A,1
        LD	(IX+9),A                ; record = 1
        BIT	6,D
        JR	Z,J.7B8F
        BIT	2,D
        JR	NZ,J.7B8F
        SET	2,D                     ; side 1
        LD	A,D
        AND	0FH
        LD	(IX+6),A                ; drive + side
        LD	A,1
        LD	(IX+8),A                ; side 1
        RET

J.7B8F:	RES	2,D                     ; side 0
        LD	A,D
        AND	0FH
        LD	(IX+6),A                ; drive + side
        XOR	A
        LD	(IX+8),A                ; side 0
        INC	C
        LD	(IX+7),C                ; cylinder
P011B:  CALL	P011F
        RET

P011F:  PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	A,(IX+23)               ; slotid disk controller
        LD	H,HIGH 4000H
        CALL	ENASLT
        LD	A,(IX+23)               ; slotid disk controller
        CALL	C.7437			; Set slotid on page 0
        POP	HL
        CALL	C.77E2                  ; seek to track
        PUSH	HL
        LD	A,(IX+24)		; saved slotid on page 0
        CALL	C.7437			; Set slotid on page 0
        LD	A,(RAMAD1)
        LD	H,HIGH 4000H
        CALL	ENASLT
        POP	HL
        POP	DE
        POP	BC
        RET

P0147:  LD	A,(D.8000)
        AND	0D0H
        XOR	80H
        RET	Z
        XOR	A
        LD	(IX+11),A               ; 
        LD	(D.9000),A
P0156:  CALL	P0160
        LD	A,(IX+12)
        LD	(D.9000),A              ; set FDC operation mode
        RET

P0160:	EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        RET

P0165:	PUSH	BC
        LD	B,6
        PUSH	IX
P016A:  CALL	P0184
        LD	A,(IX+6)
        INC	IX
        DJNZ	P016A
        POP	IX
        POP	BC
        LD	A,(IX+9)                ; record
P017A:  CALL	P0184
        LD	A,1BH
P017F:  CALL	P0184
        LD	A,0FFH
P0184:  PUSH	AF
J$7C09:	LD	A,(D.8000)
        AND	0E0H
        CP	80H
        JR	NZ,J$7C09
        POP	AF
        LD	(D.8001),A
        RET

P0193:	PUSH	IX
J.7C19:	LD	A,(D.8000)
        AND	0C0H
        CP	0C0H
        JR	NZ,J.7C19
        LD	A,(D.8001)
        LD	(IX+14),A
        INC	IX
P01A6:  CALL	P0160
        LD	A,(D.8000)
        AND	0C0H
        CP	80H
        JR	NZ,J.7C19
        POP	IX
        RET

        .DEPHASE

S7A84   EQU     $-I$7A84

;	  Subroutine CHOICE
;	     Inputs  ________________________
;	     Outputs ________________________

CHOICE: LD	HL,I$7C3D
        RET

I$7C3D: DEFB    13,10

        IF      LANG EQ 0

        DEFB    '1) 3.5"  Simple lado (360 Kb)',13,10
        DEFB    '2) 3.5"  Doble lado  (720 Kb)',13,10
        DEFB    '3) 5.25" Doble lado  (360 Kb)',13,10

        ELSE

        DEFB    '1 - 3.5"  Single sided (360 Kb)',13,10
        DEFB    '2 - 3.5"  Double sided (720 Kb)',13,10
        DEFB    '3 - 5.25" Double sided (360 Kb)',13,10

        ENDIF

        DEFB    13,10
        DEFB    0

;	  Subroutine DSKFMT
;	     Inputs  ________________________
;	     Outputs ________________________

DSKFMT: CALL	DISINT
        DI
        CALL	C.7473			; Enable FDC on page 0
        DEC	A                       ; choice 1 ?
        JR	Z,J.7CAF                ; yep, use media descriptor 0F8H
        BIT	0,A                     ; choice 2 ?
        JR	NZ,J.7CAF               ; yep, use media descriptor 0F9H
        LD	A,0FDH-0F8H             ; use media descriptor 0FDH
J.7CAF:	ADD	A,0F8H
        LD	C,A
	PUSH	AF
        LD	A,D
        CP	1+1                     ; valid drive ?
	JR	C,J$7CBE                ; yep, continue
        POP	AF
        LD	A,12
        JP	J.7D8D                  ; quit with bad parameter error

J$7CBE:	LD	DE,0                    ; sector 0
        CALL	C.76E4                  ; setup for disk operation
        POP	BC
        LD	A,6
	JP	C,J.7D8D                ; error, quit with seek error
        LD	A,B
        LD	(IX+13),A               ; store media descriptor
        LD	A,1
        EX	AF,AF'                  ; record = 1

J.7CD1:	PUSH	DE                      ; store drive, side
        PUSH	IX
        POP	HL
        LD	BC,7
        ADD	HL,BC
        PUSH	HL                      ; store pointer format data (cylinder,head,record,record size)
J$7CDA:	LD	C,1
        LD	A,4DH                   ; FORMAT A TRACK
        CALL	C.785B                  ; write command byte to FDC
        LD	A,D                     ; drive
        CALL	C.785B                  ; write command byte to FDC
        LD	A,02H                   ; 512 bytes per sector
        CALL	C.785B                  ; write command byte to FDC
        LD	A,09H                   ; 9 sectors per track
        CALL	C.785B                  ; write command byte to FDC
        LD	A,52H                   ; GAP3
        CALL	C.785B                  ; write command byte to FDC
        LD	A,0E5H                  ; sector fill byte
        LD	DE,D.0000               ; FDC status register
	CALL	C.785B                  ; write command byte to FDC

J$7CFC:	LD	B,4                     ; 4 bytes (cylinder,head,record,record size)
        EX	AF,AF'
        LD	(IX+9),A                ; update record
        INC	A
        EX	AF,AF'                  ; increase record
        POP	HL                      ; restore pointer format data (cylinder,head,record,record size)
        PUSH	HL                      ; store pointer format data (cylinder,head,record,record size)

J.7D06:	LD	A,(DE)                  ; read FDC status
        RLA                             ; RQM ?
        JR	NC,J.7D06               ; nope, wait
        AND	40H                     ; DIO ?
        JR	Z,J$7D17                ; nope, end of track
        LD	A,(HL)
        INC	E
        LD	(DE),A                  ; write format data to FDC
        DEC	E
        INC	HL
        DJNZ	J.7D06                  ; next byte
        JR	J$7CFC                  ; next record

J$7D17:	POP	HL                      ; restore pointer format data (cylinder,head,record,record size)
        POP	DE                      ; drive, side
        CALL	C.786A                  ; read result bytes from FDC
        BIT	1,(IX+15)               ; NOT WRITEABLE ?
        JR	NZ,J$7D8B               ; yep, quit with disk write protect error
        BIT	2,D                     ; side 1 ?
        JR	NZ,J.7D3F               ; yep, next cylinder
        LD	A,(IX+13)               ; media descriptor
        CP	0F8H                    ; single sided 3.5" ?
        JR	Z,J.7D3F                ; yep, skip side 1
        SET	2,D                     ; side 1
        LD	(IX+6),D                ; drive + side
        LD	(IX+8),1                ; side 1
        LD	(IX+9),1                ; record = 1
        LD	A,1
        EX	AF,AF'                  ; record = 1
        JR	J.7CD1                  ; format next track

J.7D3F:	LD	C,40-1
        LD	A,(IX+13)               ; media descriptor
        CP	0FDH                    ; double sided 5.25" ?
        JR	Z,J$7D4A                ; yep, 40 cylinders
        LD	C,80-1                  ; 80 cylinders
J$7D4A:	LD	A,(IX+7)                ; cylinder
        CP	C                       ; last cylinder ?
        JR	Z,J$7D91                ; yep,
        INC	A
        LD	(IX+7),A                ; next cylinder
        IN	A,(0AAH)
        AND	0F0H
        ADD	A,7
        OUT	(0AAH),A
        IN	A,(0A9H)                ; read keyboard row 7
        AND	10H                     ; STOP key pressed ?
        JR	NZ,J$7D6D               ; nope,
        IN	A,(0AAH)
        DEC	A
        OUT	(0AAH),A
        IN	A,(0A9H)                ; read keyboard row 6
        AND	02H                     ; CTRL key pressed ?
        JR	Z,J$7D87                ; yep, quit with write fault error
J$7D6D:	RES	2,D                     ; side 0
        LD	(IX+6),D                ; drive + side
        LD	(IX+8),0                ; side 0
        LD	(IX+9),1                ; record = 1
        CALL	C.77E2                  ; seek to track
        LD	A,1
        EX	AF,AF'                  ; record = 1
        JP	NC,J.7CD1               ; no error, format next cylinder
J$7D83:	LD	A,6
        JR	J.7D8D                  ; quit with seek error

J$7D87:	LD	A,10
        JR	J.7D8D

J$7D8B:	LD	A,0
J.7D8D:	SCF
        JP	J.753B                  ; dskio finish

J$7D91:	XOR	A
        LD	(IX+7),A                ; cylinder = 0
        RES	2,D                     ; side 0
        LD	(IX+6),D                ; drive + side
        LD	(IX+8),0                ; side 0
        LD	(IX+9),1                ; record = 1
        CALL	C.77E2                  ; seek to track
        JR	C,J$7D83                ; error,
        CALL	GETWRK
        LD	A,(IX+24)		; saved slotid on page 0
        CALL	C.7437			; Set slotid on page 0
        LD	HL,($SECBUF)
        PUSH	HL
        PUSH	HL
        POP	DE
        INC	DE
        LD	(HL),0
        LD	BC,SECLEN
        LDIR                            ; clear sector buffer
        LD	HL,I$7E92
        POP	DE
        LD	BC,S7E92
        LDIR                            ; copy BPB + bootloader
        LD	A,(IX+13)               ; media descriptor
        LD	IY,($SECBUF)
        LD	(IY+21),A               ; update BPB media descriptor
        CP	0F8H                    ; single sided ?
        JR	NZ,J$7DDB               ; nope, skip
        LD	(IY+26),1               ; update BPB number of sides
        JR	J.7DEB                  ; continue

J$7DDB:	CP	0F9H                    ; 3.5" double sided ?
        JR	NZ,J.7DEB               ; nope, skip
        LD	(IY+22),3               ; update BPB number of sectors per FAT
        LD	(IY+19),LOW 1440
        LD	(IY+20),HIGH 1440       ; update BPB number of sectors on disk
J.7DEB:	LD	HL,($SECBUF)
        LD	DE,0                    ; sector 0
        LD	B,1                     ; 1 sector
        LD	C,A                     ; media descriptor
        LD	A,(IX+6)
        AND	03H                     ; drive
        SCF                             ; write sector
        PUSH	IX
        CALL	C.752E                  ; DSKIO
        POP	IX
        JP	C,J.7E7B                ; error,
        LD	HL,($SECBUF)
        PUSH	HL
        POP	IY
        LD	A,(IY+16)
        LD	B,0
J$7E0F:	LD	(HL),0
        INC	HL
        DJNZ	J$7E0F                  ; clear sector buffer
        ADD	A,A
        ADD	A,7
        LD	B,A
        LD	DE,1                    ; 1st sector of 1st FAT
J$7E1B:	LD	A,(IX+13)
        PUSH	BC
        PUSH	DE
        LD	HL,($SECBUF)
        LD	B,1                     ; 1 sector
        LD	C,A                     ; media descriptor
        LD	A,(IX+6)
        AND	03H                     ; drive
        SCF                             ; write sector
        PUSH	IX
        CALL	C.752E                  ; DSKIO
        POP	IX
        POP	DE
        POP	BC
        JP	C,J.7E7B                ; error,
        INC	DE
        DJNZ	J$7E1B                  ; next FAT sector
        LD	HL,($SECBUF)
        LD	A,(IX+13)
        LD	(HL),A                  ; media descriptor
        INC	HL
        LD	(HL),0FFH
        INC	HL
        LD	(HL),0FFH
        LD	HL,($SECBUF)
        LD	B,1                     ; 1 sector
        LD	C,A                     ; media descriptor
        LD	DE,1                    ; 1st sector of 1st FAT
        LD	A,(IX+6)
        AND	03H                     ; drive
        SCF
        PUSH	IX
        CALL	C.752E                  ; DSKIO
        POP	IX
        JP	C,J.7E7B                ; error,
        LD	HL,($SECBUF)
        LD	A,(IX+13)
        LD	B,1                     ; 1 sector
        LD	C,A                     ; media descriptor
        LD	DE,2                    ; ?? must be a bug, should be LD DE,3
        CP	0F9H                    ; 3.5" double sided ?
        JR	NZ,J$7E72               ; nope,
        INC	DE
J$7E72:	SCF
        LD	A,(IX+6)
        AND	03H                     ; drive
        JP	C.752E                  ; DSKIO and quit

J.7E7B:	PUSH	AF
        LD	C,0
        LD	(IX+0),4*50             ; motor off timer = 4 seconds
        LD	A,(IX+13)
        AND	A                       ; ?? must be a bug, should be (IX+6): drive 0 ?
        JR	NZ,J$7E8D               ; nope, drive 1 disk change timer = 0 seconds and quit
        LD	(IX+1),C                ; drive 0 disk change timer = 0 seconds
        POP	AF
        RET

J$7E8D:	LD	(IX+2),C
        POP	AF
        RET

I$7E92:
        .PHASE	0C000H

        DEFB	0EBH			; 00H, x86 JMP +0100H
        DEFB	0FEH
        DEFB	090H			; 02H, x86 NOP
	DEFB	"TALENT.1"		; 03H, OEM system name

					;      BPB (BIOS Parameter Block)
        DEFW	512			; 0BH, bytes per sector
        DEFB	2			; 0DH, sectors per cluster
        DEFW	1			; 0EH, reserved sectors (= 1st FAT sector)
        DEFB	2			; 10H, number of FATs
        DEFW	112			; 11H, number of (root) directory entries
        DEFW	720			; 13H, total number of sectors on disk
        DEFB	0FDH			; 15H, media descriptor byte
        DEFW	2			; 16H, sectors per FAT
        DEFW	9			; 18H, sectors per track
        DEFW	2			; 1AH, number of sides
        DEFW	0			; 1CH, number of hidden sectors

					;      MSX boot loader

C.C01E:	RET	NC
	LD	(C.C058+1),DE
	LD	(D.C0DA),A
	LD	(HL),LOW C.C056
	INC	HL
	LD	(HL),HIGH C.C056
J$C02B:	LD	SP,KBUF+256
	LD	DE,I.C0B5
	LD	C,0FH
	CALL	BDOS
	INC	A
	JP	Z,J$C063
	LD	DE,0100H
	LD	C,1AH
	CALL	BDOS
	LD	HL,1
	LD	(I.C0B5+14),HL
	LD	HL,4000H-0100H
	LD	DE,I.C0B5
	LD	C,27H
	CALL	BDOS
	JP	0100H

C.C056: DEFW    C.C058

C.C058:	CALL	0
	LD	A,C
	AND	0FEH
	CP	02H
	JP	NZ,J$C06A
J$C063:	LD	A,(D.C0DA)
	AND	A
	JP	Z,BASENT
J$C06A:	LD	DE,I$C08F
	CALL	C.C081
	LD	C,7
	CALL	BDOS
	JR	J$C02B

; Garbage ?

?.C077: DEFB    0B9H,0CBH,0B7H,0CDH,0F6H,0F2H,0ECH,0FDH
        DEFB    0F8H,0B9H

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.C081:	LD	A,(DE)
	OR	A
	RET	Z
	PUSH	DE
	LD	E,A
	LD	C,6
	CALL	BDOS
	POP	DE
	INC	DE
	JR	C.C081

I$C08F:	DEFB	"Boot error",13,10
        DEFB	"Press any key for retry",13,10
        DEFB	0

I.C0B5:	DEFB	0
        DEFB	"MSXDOS  "
        DEFB	"SYS"
        DEFW	0
        DEFW	0
        DEFB	0,0,0,0
        DEFW	0
        DEFW	0
        DEFB	0
        DEFB	0
        DEFW	0
        DEFW	0
        DEFW	0
        DEFB	0
        DEFB	0,0,0,0

D.C0DA:	DEFB	0

        .DEPHASE

S7E92   EQU     $-I$7E92

;	  Subroutine OEMSTA
;	     Inputs  ________________________
;	     Outputs ________________________

OEMSTA:
        SCF
        RET

        DEFS    8000H-$,0
