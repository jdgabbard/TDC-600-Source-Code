TDC-600 Notes

MSX-DOS Version
---------------
The BIO ROM Appears to be based on version disk850902.mac

	This is suggested by what I suspect is a signature at memory
	location 7E96H:
 
		DEFB "TALENT.1",00H
		DEFB 00H,02H,02H,01H,00H,02H,70H,00H,D0H,02H,FDH,02H,00H,09H,00H,02H,00H,00H,00H
	
	If we look at the last 8 bytes of what I suspect is a signature we see:
		02h 00h 09h 00h 02h 00h 00h 00h
   
	This could be read as: Version 02, Date 0902, 000
 
	If we look to the disk850902.mac file, we see the note:
		
		; DOS 1.02 kernel (most common used)
		; version number is not offical, it is created by me
		; Assume this is version Sep  2, 1985 (fixed disk damage and template problem)
		
	Though, it is noted it is an unofficial version, the information does match up.
	And is consistent with information at: https://www.msx.org/wiki/The_History_of_MSX-DOS
	This information suggests there was an update to COMMAND.COM on Sept 2, 1985.  Which leads
	me to believe this was in fact an updated BIOS for the MSX-DOS version. However, the current
	MSXDOS.SYS version number would have been 1.03.  Though it is plausible that an older version
	of the MSX Kernel would have been used, or was still current at that time.  Or that v1.02 of
	the BIOS was released at that time.  Again, mostly speculation at this point.
	

Variables
---------------

	SECLEN is the maximum sectors per track supported by the diskdriver.

Omega Home Computer
---------------------

	One area of interest is the modification of this routine to allow inclusion into the Omega
	Home Computer Project: https://github.com/skiselev/omega

	Though Sergey has not to my knowledge planned an inclusion of a FDC on the Omega Mainboard,
	this project has the potential to allow an add-on board through the RAM Expansion header.
	The idea is to place logic at page 2 in memory(8000-C000h) at page 255 of the mapper to allow
	a chip-select signal to be generated by combining the following signals:

	/RAMCS_7 + A18 + A17 + A16 + A15 + A14 + /A13 + /A12 = 8000h @ Slot 3-2 with page 255
	/RAMCS_7 + A18 + A17 + A16 + A15 + A14 + /A13 + A12 = 9000h @ Slot 3-2 with page 255

	I believe the process to activate this area in memory would be something like:
	
	FSLTEN:			;Floppy Slot Enable
		IN A,(A8H)	;Get Current Slots
		CPL A		;Invert - Slots are inverted on read
		PUSH AF		;Store so we can switch back
		AND 0FFH	;Bit-mask for 1111xxxx - 8000H & C000H
		OUT (A8H),A	;Write the Slots
		LD A,(0FFFFH)	;Get Sub-Slots
		PUSH AF		;Store so we can switch back
		AND 0EFH	;Bit-mask for Slot 3-2 @ 8000H - xx10xxxx
		LD (0FFFFH),A	;Write the Sub-Slot
		IN (0FEH),A	;Get Current Page
		PUSH AF		;Store it for restore
		LD A,0FFH	;Now Write the Page for the Mapper
		OUT (0FEH),A	;Page 2 is now Active at: 3-2 Page 255
		RET		;Return to calling function


		;Write / Read the Data


	FSLTDS:			;Floppy Slot Disable
				;Now Restore our Slots
		POP AF		;Get back our Mapper Page
		OUT (0FEH),A	;Restore the Mapper Page
		POP AF		;Get back our Sub-Slot
		LD (0FFFFH),A	;Write back our Sub-Slot
		POP AF		;Get back our Primary Slot
		OUT (0A8H),A	;Write our Primary Slots back
		RET		;And we're done.

	There are a total of 170 bytes for programming the slots switching scheme and directing the
	routines to those memory locations.  Which 25 bytes being located anywhere within the driver,
	and 145 bytes being available at the end of the driver.  And it should be possible to place
	this code at the very end of the driver, with calls to it to either side of the routines
	needed for reading / writing code. Though I'm not entirely sure on the programming side for
	slots at this time - this will be a first for me.

	Should a FDC be included in that project at a later time, the method of writing
	data to/from the FDC would be as simple as converting the routines to write to an IO address
	instead of an area of memory.  Specifically D0-D7H, wherein only three addresses are needed.
	Such as D0 for Status Register (Read Only), D1 for Data Register (Read & Write), and D2 for
	the Load Operation Register (Write Only).  But care should be taken so that Writes to D0 do
	not happen, as that is an illegal operation, and could damage the WD37C65.
